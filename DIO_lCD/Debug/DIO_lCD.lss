
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000740  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000007b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116d  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adb  00000000  00000000  00001b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a38  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00003060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fb  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000764  00000000  00000000  00003aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_try>:
#include "SPI_TRY.h"
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/TIMER/TIMER.h"
void SPI_try()
{
	Timer_intialize();
  92:	0e 94 0b 02 	call	0x416	; 0x416 <Timer_intialize>
	
	SPI_Master_Intialize();
  96:	0e 94 c5 01 	call	0x38a	; 0x38a <SPI_Master_Intialize>
	DIO_SetPortDirection(PORTA,Output);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 90 00 	call	0x120	; 0x120 <DIO_SetPortDirection>
	
	uint8 num=0;
	while(1)
	{
		SPI_Master_Transmit(0);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <SPI_Master_Transmit>
		TIMER_delay(5);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	80 ea       	ldi	r24, 0xA0	; 160
  ae:	90 e4       	ldi	r25, 0x40	; 64
  b0:	0e 94 1e 02 	call	0x43c	; 0x43c <TIMER_delay>
		
		SPI_Master_Transmit(0xf0);
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <SPI_Master_Transmit>
		TIMER_delay(5);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 ea       	ldi	r24, 0xA0	; 160
  c0:	90 e4       	ldi	r25, 0x40	; 64
  c2:	0e 94 1e 02 	call	0x43c	; 0x43c <TIMER_delay>
  c6:	ed cf       	rjmp	.-38     	; 0xa2 <SPI_try+0x10>

000000c8 <main>:
#include "APP/SPI_TRY.h"

int main()
{

	SPI_try();
  c8:	0e 94 49 00 	call	0x92	; 0x92 <SPI_try>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x4>

000000ce <__vector_16>:

//THIS SENTENCE IS SPECIAL TO ADC_MAX_NUMBER_OF_STEPS	KE PROCESSEOR NOT TO OPTIMIZE THE CODE AND DELETE THIS FUCNTION
void __vector_16(void) __attribute__((signal , used));

void __vector_16(void)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	
	if(ADC_CallBackPtr!=NULL)
  f0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f8:	30 97       	sbiw	r30, 0x00	; 0
  fa:	09 f0       	breq	.+2      	; 0xfe <__vector_16+0x30>
	{
		
		ADC_CallBackPtr();
  fc:	09 95       	icall
		
	}
		
	
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <DIO_SetPortDirection>:
	switch(Port_ID)
	{
		case(PORTA): PORTA_Reg  =Value;break;
		case(PORTB): PORTB_Reg = Value;break;
		case(PORTC): PORTC_Reg = Value;break;
		case(PORTD): PORTD_Reg = Value;break;
 120:	61 30       	cpi	r22, 0x01	; 1
 122:	a1 f4       	brne	.+40     	; 0x14c <DIO_SetPortDirection+0x2c>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	49 f0       	breq	.+18     	; 0x13a <DIO_SetPortDirection+0x1a>
 128:	28 f0       	brcs	.+10     	; 0x134 <DIO_SetPortDirection+0x14>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	49 f0       	breq	.+18     	; 0x140 <DIO_SetPortDirection+0x20>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	51 f0       	breq	.+20     	; 0x146 <DIO_SetPortDirection+0x26>
 132:	08 95       	ret
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
 138:	08 95       	ret
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret
 14c:	61 11       	cpse	r22, r1
 14e:	0f c0       	rjmp	.+30     	; 0x16e <DIO_SetPortDirection+0x4e>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	41 f0       	breq	.+16     	; 0x164 <DIO_SetPortDirection+0x44>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_SetPortDirection+0x40>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	39 f0       	breq	.+14     	; 0x168 <DIO_SetPortDirection+0x48>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	39 f0       	breq	.+14     	; 0x16c <DIO_SetPortDirection+0x4c>
 15e:	08 95       	ret
 160:	1a ba       	out	0x1a, r1	; 26
 162:	08 95       	ret
 164:	17 ba       	out	0x17, r1	; 23
 166:	08 95       	ret
 168:	14 ba       	out	0x14, r1	; 20
 16a:	08 95       	ret
 16c:	11 ba       	out	0x11, r1	; 17
 16e:	08 95       	ret

00000170 <DIO_SetPinDirection>:
}


void DIO_SetPinDirection(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID,DIO_Direcrion Direction)
{
	if(Direction==Input)
 170:	41 11       	cpse	r20, r1
 172:	38 c0       	rjmp	.+112    	; 0x1e4 <DIO_SetPinDirection+0x74>
	{
		switch(Port_ID)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 f0       	breq	.+36     	; 0x19c <DIO_SetPinDirection+0x2c>
 178:	28 f0       	brcs	.+10     	; 0x184 <DIO_SetPinDirection+0x14>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	d9 f0       	breq	.+54     	; 0x1b4 <DIO_SetPinDirection+0x44>
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	29 f1       	breq	.+74     	; 0x1cc <DIO_SetPinDirection+0x5c>
 182:	08 95       	ret
		{
			case(PORTA):ClearBIT(DDRA_Reg,Pin_ID);break;
 184:	2a b3       	in	r18, 0x1a	; 26
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SetPinDirection+0x20>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SetPinDirection+0x1c>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	8a bb       	out	0x1a, r24	; 26
 19a:	08 95       	ret
			case(PORTB):ClearBIT(DDRB_Reg,Pin_ID);break;
 19c:	27 b3       	in	r18, 0x17	; 23
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinDirection+0x38>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinDirection+0x34>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	87 bb       	out	0x17, r24	; 23
 1b2:	08 95       	ret
			case(PORTC):ClearBIT(DDRC_Reg,Pin_ID);break;
 1b4:	24 b3       	in	r18, 0x14	; 20
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_SetPinDirection+0x50>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_SetPinDirection+0x4c>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	84 bb       	out	0x14, r24	; 20
 1ca:	08 95       	ret
			case(PORTD):ClearBIT(DDRD_Reg,Pin_ID);break;
 1cc:	21 b3       	in	r18, 0x11	; 17
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinDirection+0x68>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinDirection+0x64>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	81 bb       	out	0x11, r24	; 17
 1e2:	08 95       	ret
		}
	}
	
	else if(Direction==Output)
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	99 f5       	brne	.+102    	; 0x24e <DIO_SetPinDirection+0xde>
	{
		
		switch(Port_ID)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	89 f0       	breq	.+34     	; 0x20e <DIO_SetPinDirection+0x9e>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <DIO_SetPinDirection+0x88>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	c9 f0       	breq	.+50     	; 0x224 <DIO_SetPinDirection+0xb4>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	11 f1       	breq	.+68     	; 0x23a <DIO_SetPinDirection+0xca>
 1f6:	08 95       	ret
		{
				case(PORTA):SetBIT(DDRA_Reg,Pin_ID);break;
 1f8:	2a b3       	in	r18, 0x1a	; 26
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPinDirection+0x94>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPinDirection+0x90>
 208:	82 2b       	or	r24, r18
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	08 95       	ret
				case(PORTB):SetBIT(DDRB_Reg,Pin_ID);break;
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinDirection+0xaa>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinDirection+0xa6>
 21e:	82 2b       	or	r24, r18
 220:	87 bb       	out	0x17, r24	; 23
 222:	08 95       	ret
				case(PORTC):SetBIT(DDRC_Reg,Pin_ID);break;
 224:	24 b3       	in	r18, 0x14	; 20
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPinDirection+0xc0>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SetPinDirection+0xbc>
 234:	82 2b       	or	r24, r18
 236:	84 bb       	out	0x14, r24	; 20
 238:	08 95       	ret
				case(PORTD):SetBIT(DDRD_Reg,Pin_ID);break;
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinDirection+0xd6>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinDirection+0xd2>
 24a:	82 2b       	or	r24, r18
 24c:	81 bb       	out	0x11, r24	; 17
 24e:	08 95       	ret

00000250 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID, STD_Value Value)
{
	if(Value==HIGH)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	a1 f5       	brne	.+104    	; 0x2bc <DIO_SetPinValue+0x6c>
	{
		switch(Port_ID)
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	89 f0       	breq	.+34     	; 0x27a <DIO_SetPinValue+0x2a>
 258:	28 f0       	brcs	.+10     	; 0x264 <DIO_SetPinValue+0x14>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	c9 f0       	breq	.+50     	; 0x290 <DIO_SetPinValue+0x40>
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	11 f1       	breq	.+68     	; 0x2a6 <DIO_SetPinValue+0x56>
 262:	08 95       	ret
		{
			case(PORTA): SetBIT(PORTA_Reg,Pin_ID);break;
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinValue+0x20>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinValue+0x1c>
 274:	82 2b       	or	r24, r18
 276:	8b bb       	out	0x1b, r24	; 27
 278:	08 95       	ret
			case(PORTB): SetBIT(PORTB_Reg,Pin_ID);break;
 27a:	28 b3       	in	r18, 0x18	; 24
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_SetPinValue+0x36>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_SetPinValue+0x32>
 28a:	82 2b       	or	r24, r18
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	08 95       	ret
			case(PORTC): SetBIT(PORTC_Reg,Pin_ID);break;
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_SetPinValue+0x4c>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_SetPinValue+0x48>
 2a0:	82 2b       	or	r24, r18
 2a2:	85 bb       	out	0x15, r24	; 21
 2a4:	08 95       	ret
			case(PORTD): SetBIT(PORTD_Reg,Pin_ID);break;
 2a6:	22 b3       	in	r18, 0x12	; 18
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_SetPinValue+0x62>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_SetPinValue+0x5e>
 2b6:	82 2b       	or	r24, r18
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	08 95       	ret
			
		}
		
	}
	else if(Value==LOW)
 2bc:	41 11       	cpse	r20, r1
 2be:	37 c0       	rjmp	.+110    	; 0x32e <DIO_SetPinValue+0xde>
	{
			switch(Port_ID)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 f0       	breq	.+36     	; 0x2e8 <DIO_SetPinValue+0x98>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_SetPinValue+0x80>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	d9 f0       	breq	.+54     	; 0x300 <DIO_SetPinValue+0xb0>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	29 f1       	breq	.+74     	; 0x318 <DIO_SetPinValue+0xc8>
 2ce:	08 95       	ret
			{
				case(PORTA): ClearBIT(PORTA_Reg,Pin_ID);break;
 2d0:	2b b3       	in	r18, 0x1b	; 27
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_SetPinValue+0x8c>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_SetPinValue+0x88>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	08 95       	ret
				case(PORTB): ClearBIT(PORTB_Reg,Pin_ID);break;
 2e8:	28 b3       	in	r18, 0x18	; 24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinValue+0xa4>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinValue+0xa0>
 2f8:	80 95       	com	r24
 2fa:	82 23       	and	r24, r18
 2fc:	88 bb       	out	0x18, r24	; 24
 2fe:	08 95       	ret
				case(PORTC): ClearBIT(PORTC_Reg,Pin_ID);break;
 300:	25 b3       	in	r18, 0x15	; 21
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_SetPinValue+0xbc>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_SetPinValue+0xb8>
 310:	80 95       	com	r24
 312:	82 23       	and	r24, r18
 314:	85 bb       	out	0x15, r24	; 21
 316:	08 95       	ret
				case(PORTD): ClearBIT(PORTD_Reg,Pin_ID);break;
 318:	22 b3       	in	r18, 0x12	; 18
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_SetPinValue+0xd4>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_SetPinValue+0xd0>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	82 bb       	out	0x12, r24	; 18
 32e:	08 95       	ret

00000330 <__vector_1>:
	EXTI_CallBackPtr=CopyFuncPTR;
}
//this prototype to prevent compiler from optimization of this function
void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	if(EXTI_CallBackPtr!=NULL)
 352:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI_CallBackPtr>
 356:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI_CallBackPtr+0x1>
 35a:	30 97       	sbiw	r30, 0x00	; 0
 35c:	09 f0       	breq	.+2      	; 0x360 <__vector_1+0x30>
		EXTI_CallBackPtr();
 35e:	09 95       	icall
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <Global_Interrupt_Enable>:


static void (*CallBackPtr)(void);
void Global_Interrupt_Enable()
{
	SetBIT(SREG_REG,GIE_ENABLE_BIT);
 382:	8f b7       	in	r24, 0x3f	; 63
 384:	80 68       	ori	r24, 0x80	; 128
 386:	8f bf       	out	0x3f, r24	; 63
 388:	08 95       	ret

0000038a <SPI_Master_Intialize>:

 void SPI_Master_Intialize()
 {
	//1) set MOSI ,SCK,SS as output pins and MISO to input pin
	 
		 DIO_SetPinDirection(PORTB,4,Output);//SS
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	64 e0       	ldi	r22, 0x04	; 4
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_SetPinDirection>
		 DIO_SetPinDirection(PORTB,5,Output);//MOSI
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_SetPinDirection>
		 DIO_SetPinDirection(PORTB,7,Output);//SCK
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	67 e0       	ldi	r22, 0x07	; 7
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_SetPinDirection>
		 DIO_SetPinDirection(PORTB,6,Input);//MISO
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_SetPinDirection>
	//enable SPI
		SetBIT(SPCR_REG,6);	 
 3b2:	8d b1       	in	r24, 0x0d	; 13
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	8d b9       	out	0x0d, r24	; 13
	//2) set SS pin to high	 
		DIO_SetPinValue(PORTB,4,HIGH);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPinValue>
	//3) enable SPIin master mood
		 SPCR_REG |= SPI_Master_Mode;
 3c2:	8d b1       	in	r24, 0x0d	; 13
 3c4:	80 61       	ori	r24, 0x10	; 16
 3c6:	8d b9       	out	0x0d, r24	; 13
	//4) Choose prescaling 
		SPCR_REG |= SPI_Prescaling_Selector;
 3c8:	8d b1       	in	r24, 0x0d	; 13
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	8d b9       	out	0x0d, r24	; 13
	//5) choose speed 
		SPSR_REG |= SPI_Speed_Selector;		 
 3ce:	8e b1       	in	r24, 0x0e	; 14
 3d0:	8e b9       	out	0x0e, r24	; 14
 3d2:	08 95       	ret

000003d4 <SPI_Master_Transmit>:
		 	
 }
  void SPI_Master_Transmit(uint8 SendByte)
  {
 3d4:	cf 93       	push	r28
 3d6:	c8 2f       	mov	r28, r24
	  //pull SS to low
	  DIO_SetPinValue(PORTB,4,LOW);
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	64 e0       	ldi	r22, 0x04	; 4
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPinValue>
	  
	  //write data to SPDR register
	  SPDR_REG =SendByte;
 3e2:	cf b9       	out	0x0f, r28	; 15
	  
	  //WAIT until Transmit ends
	  while(!GetBIT(SPSR_REG,7));
 3e4:	77 9b       	sbis	0x0e, 7	; 14
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <SPI_Master_Transmit+0x10>
	  
	  //flush received data 
	  uint8 flusher =SPDR_REG;
 3e8:	8f b1       	in	r24, 0x0f	; 15
	  
	  //set SS to high
	  DIO_SetPinValue(PORTB,4,HIGH);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPinValue>
  }
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <TIMER0_ISR>:
	//TCCR0_REG&&TIMER_CLOCK_SELECT_clr_msk;
	
}
void TIMER0_ISR()
{
	overflow++;
 3f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <overflow>
 3fc:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <overflow+0x1>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <overflow+0x1>
 406:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <overflow>
 40a:	08 95       	ret

0000040c <TIMER_SetCallback>:
	};

void TIMER_SetCallback(void(*CopyFuncPTR)(void))
{
	Timer_CallBackPtr=CopyFuncPTR;
 40c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Timer_CallBackPtr+0x1>
 410:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Timer_CallBackPtr>
 414:	08 95       	ret

00000416 <Timer_intialize>:
1)SELECT MODE OF OPERATION
2)ENABLE OR DISABLE OF INTERRUPT
3)SELECT CLOCK SOURCE
*/

	TCNT0_REG=0;
 416:	12 be       	out	0x32, r1	; 50
//1)
	TCCR0_REG&=TIMER_WAVE_FORM_MODE_clr_msk;
 418:	83 b7       	in	r24, 0x33	; 51
 41a:	87 7b       	andi	r24, 0xB7	; 183
 41c:	83 bf       	out	0x33, r24	; 51
	TCCR0_REG|=TIMER_WAVEFORM_SELECTOR;
 41e:	83 b7       	in	r24, 0x33	; 51
 420:	83 bf       	out	0x33, r24	; 51
//2)
	TIMSK_REG&=(0b11111100);
 422:	89 b7       	in	r24, 0x39	; 57
 424:	8c 7f       	andi	r24, 0xFC	; 252
 426:	89 bf       	out	0x39, r24	; 57
	TIMSK_REG|=TIMER_OVERFLOW_INTERRUPT_STATUS	;
 428:	89 b7       	in	r24, 0x39	; 57
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	89 bf       	out	0x39, r24	; 57
	TIMSK_REG|=TIMER_CompareMatch_INTERRUPT_STATUS;
 42e:	89 b7       	in	r24, 0x39	; 57
 430:	89 bf       	out	0x39, r24	; 57
	
	TIMER_SetCallback(TIMER0_ISR);
 432:	8c ef       	ldi	r24, 0xFC	; 252
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 06 02 	call	0x40c	; 0x40c <TIMER_SetCallback>
 43a:	08 95       	ret

0000043c <TIMER_delay>:
{
	Timer_CallBackPtr=CopyFuncPTR;
}

void TIMER_delay(float delay)
{
 43c:	cf 92       	push	r12
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	6b 01       	movw	r12, r22
 446:	7c 01       	movw	r14, r24
	Global_Interrupt_Enable();
 448:	0e 94 c1 01 	call	0x382	; 0x382 <Global_Interrupt_Enable>
	TCCR0_REG|=TIMER_CLK_SELECTOR;
 44c:	83 b7       	in	r24, 0x33	; 51
 44e:	85 60       	ori	r24, 0x05	; 5
 450:	83 bf       	out	0x33, r24	; 51
	delay*=2*1.5;
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e4       	ldi	r20, 0x40	; 64
 458:	50 e4       	ldi	r21, 0x40	; 64
 45a:	c7 01       	movw	r24, r14
 45c:	b6 01       	movw	r22, r12
 45e:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3>
 462:	6b 01       	movw	r12, r22
 464:	7c 01       	movw	r14, r24
	while(overflow<delay)
 466:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <overflow>
 46a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <overflow+0x1>
 46e:	07 2e       	mov	r0, r23
 470:	00 0c       	add	r0, r0
 472:	88 0b       	sbc	r24, r24
 474:	99 0b       	sbc	r25, r25
 476:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__floatsisf>
 47a:	9b 01       	movw	r18, r22
 47c:	ac 01       	movw	r20, r24
 47e:	c7 01       	movw	r24, r14
 480:	b6 01       	movw	r22, r12
 482:	0e 94 2c 03 	call	0x658	; 0x658 <__gesf2>
 486:	18 16       	cp	r1, r24
 488:	74 f3       	brlt	.-36     	; 0x466 <TIMER_delay+0x2a>
	{
		
	}
	overflow=0;
 48a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <overflow+0x1>
 48e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflow>
	TCCR0_REG&=TIMER_CLOCK_SELECT_clr_msk;
 492:	83 b7       	in	r24, 0x33	; 51
 494:	88 7f       	andi	r24, 0xF8	; 248
 496:	83 bf       	out	0x33, r24	; 51
}
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	08 95       	ret

000004a2 <__vector_11>:



void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	if(Timer_CallBackPtr!=NULL)
 4c4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Timer_CallBackPtr>
 4c8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Timer_CallBackPtr+0x1>
 4cc:	30 97       	sbiw	r30, 0x00	; 0
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_11+0x30>
		Timer_CallBackPtr();
 4d0:	09 95       	icall
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__floatunsisf>:
 4f4:	e8 94       	clt
 4f6:	09 c0       	rjmp	.+18     	; 0x50a <__floatsisf+0x12>

000004f8 <__floatsisf>:
 4f8:	97 fb       	bst	r25, 7
 4fa:	3e f4       	brtc	.+14     	; 0x50a <__floatsisf+0x12>
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	99 23       	and	r25, r25
 50c:	a9 f0       	breq	.+42     	; 0x538 <__floatsisf+0x40>
 50e:	f9 2f       	mov	r31, r25
 510:	96 e9       	ldi	r25, 0x96	; 150
 512:	bb 27       	eor	r27, r27
 514:	93 95       	inc	r25
 516:	f6 95       	lsr	r31
 518:	87 95       	ror	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f1 11       	cpse	r31, r1
 522:	f8 cf       	rjmp	.-16     	; 0x514 <__floatsisf+0x1c>
 524:	fa f4       	brpl	.+62     	; 0x564 <__floatsisf+0x6c>
 526:	bb 0f       	add	r27, r27
 528:	11 f4       	brne	.+4      	; 0x52e <__floatsisf+0x36>
 52a:	60 ff       	sbrs	r22, 0
 52c:	1b c0       	rjmp	.+54     	; 0x564 <__floatsisf+0x6c>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	16 c0       	rjmp	.+44     	; 0x564 <__floatsisf+0x6c>
 538:	88 23       	and	r24, r24
 53a:	11 f0       	breq	.+4      	; 0x540 <__floatsisf+0x48>
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	11 c0       	rjmp	.+34     	; 0x562 <__floatsisf+0x6a>
 540:	77 23       	and	r23, r23
 542:	21 f0       	breq	.+8      	; 0x54c <__floatsisf+0x54>
 544:	9e e8       	ldi	r25, 0x8E	; 142
 546:	87 2f       	mov	r24, r23
 548:	76 2f       	mov	r23, r22
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__floatsisf+0x5e>
 54c:	66 23       	and	r22, r22
 54e:	71 f0       	breq	.+28     	; 0x56c <__floatsisf+0x74>
 550:	96 e8       	ldi	r25, 0x86	; 134
 552:	86 2f       	mov	r24, r22
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	2a f0       	brmi	.+10     	; 0x564 <__floatsisf+0x6c>
 55a:	9a 95       	dec	r25
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	da f7       	brpl	.-10     	; 0x55a <__floatsisf+0x62>
 564:	88 0f       	add	r24, r24
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	97 f9       	bld	r25, 7
 56c:	08 95       	ret

0000056e <__fp_cmp>:
 56e:	99 0f       	add	r25, r25
 570:	00 08       	sbc	r0, r0
 572:	55 0f       	add	r21, r21
 574:	aa 0b       	sbc	r26, r26
 576:	e0 e8       	ldi	r30, 0x80	; 128
 578:	fe ef       	ldi	r31, 0xFE	; 254
 57a:	16 16       	cp	r1, r22
 57c:	17 06       	cpc	r1, r23
 57e:	e8 07       	cpc	r30, r24
 580:	f9 07       	cpc	r31, r25
 582:	c0 f0       	brcs	.+48     	; 0x5b4 <__fp_cmp+0x46>
 584:	12 16       	cp	r1, r18
 586:	13 06       	cpc	r1, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	98 f0       	brcs	.+38     	; 0x5b4 <__fp_cmp+0x46>
 58e:	62 1b       	sub	r22, r18
 590:	73 0b       	sbc	r23, r19
 592:	84 0b       	sbc	r24, r20
 594:	95 0b       	sbc	r25, r21
 596:	39 f4       	brne	.+14     	; 0x5a6 <__fp_cmp+0x38>
 598:	0a 26       	eor	r0, r26
 59a:	61 f0       	breq	.+24     	; 0x5b4 <__fp_cmp+0x46>
 59c:	23 2b       	or	r18, r19
 59e:	24 2b       	or	r18, r20
 5a0:	25 2b       	or	r18, r21
 5a2:	21 f4       	brne	.+8      	; 0x5ac <__fp_cmp+0x3e>
 5a4:	08 95       	ret
 5a6:	0a 26       	eor	r0, r26
 5a8:	09 f4       	brne	.+2      	; 0x5ac <__fp_cmp+0x3e>
 5aa:	a1 40       	sbci	r26, 0x01	; 1
 5ac:	a6 95       	lsr	r26
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	81 1d       	adc	r24, r1
 5b2:	81 1d       	adc	r24, r1
 5b4:	08 95       	ret

000005b6 <__fp_inf>:
 5b6:	97 f9       	bld	r25, 7
 5b8:	9f 67       	ori	r25, 0x7F	; 127
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	08 95       	ret

000005c2 <__fp_nan>:
 5c2:	9f ef       	ldi	r25, 0xFF	; 255
 5c4:	80 ec       	ldi	r24, 0xC0	; 192
 5c6:	08 95       	ret

000005c8 <__fp_pscA>:
 5c8:	00 24       	eor	r0, r0
 5ca:	0a 94       	dec	r0
 5cc:	16 16       	cp	r1, r22
 5ce:	17 06       	cpc	r1, r23
 5d0:	18 06       	cpc	r1, r24
 5d2:	09 06       	cpc	r0, r25
 5d4:	08 95       	ret

000005d6 <__fp_pscB>:
 5d6:	00 24       	eor	r0, r0
 5d8:	0a 94       	dec	r0
 5da:	12 16       	cp	r1, r18
 5dc:	13 06       	cpc	r1, r19
 5de:	14 06       	cpc	r1, r20
 5e0:	05 06       	cpc	r0, r21
 5e2:	08 95       	ret

000005e4 <__fp_round>:
 5e4:	09 2e       	mov	r0, r25
 5e6:	03 94       	inc	r0
 5e8:	00 0c       	add	r0, r0
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <__fp_round+0xc>
 5ec:	88 23       	and	r24, r24
 5ee:	52 f0       	brmi	.+20     	; 0x604 <__fp_round+0x20>
 5f0:	bb 0f       	add	r27, r27
 5f2:	40 f4       	brcc	.+16     	; 0x604 <__fp_round+0x20>
 5f4:	bf 2b       	or	r27, r31
 5f6:	11 f4       	brne	.+4      	; 0x5fc <__fp_round+0x18>
 5f8:	60 ff       	sbrs	r22, 0
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <__fp_round+0x20>
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	08 95       	ret

00000606 <__fp_split3>:
 606:	57 fd       	sbrc	r21, 7
 608:	90 58       	subi	r25, 0x80	; 128
 60a:	44 0f       	add	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	59 f0       	breq	.+22     	; 0x626 <__fp_splitA+0x10>
 610:	5f 3f       	cpi	r21, 0xFF	; 255
 612:	71 f0       	breq	.+28     	; 0x630 <__fp_splitA+0x1a>
 614:	47 95       	ror	r20

00000616 <__fp_splitA>:
 616:	88 0f       	add	r24, r24
 618:	97 fb       	bst	r25, 7
 61a:	99 1f       	adc	r25, r25
 61c:	61 f0       	breq	.+24     	; 0x636 <__fp_splitA+0x20>
 61e:	9f 3f       	cpi	r25, 0xFF	; 255
 620:	79 f0       	breq	.+30     	; 0x640 <__fp_splitA+0x2a>
 622:	87 95       	ror	r24
 624:	08 95       	ret
 626:	12 16       	cp	r1, r18
 628:	13 06       	cpc	r1, r19
 62a:	14 06       	cpc	r1, r20
 62c:	55 1f       	adc	r21, r21
 62e:	f2 cf       	rjmp	.-28     	; 0x614 <__fp_split3+0xe>
 630:	46 95       	lsr	r20
 632:	f1 df       	rcall	.-30     	; 0x616 <__fp_splitA>
 634:	08 c0       	rjmp	.+16     	; 0x646 <__fp_splitA+0x30>
 636:	16 16       	cp	r1, r22
 638:	17 06       	cpc	r1, r23
 63a:	18 06       	cpc	r1, r24
 63c:	99 1f       	adc	r25, r25
 63e:	f1 cf       	rjmp	.-30     	; 0x622 <__fp_splitA+0xc>
 640:	86 95       	lsr	r24
 642:	71 05       	cpc	r23, r1
 644:	61 05       	cpc	r22, r1
 646:	08 94       	sec
 648:	08 95       	ret

0000064a <__fp_zero>:
 64a:	e8 94       	clt

0000064c <__fp_szero>:
 64c:	bb 27       	eor	r27, r27
 64e:	66 27       	eor	r22, r22
 650:	77 27       	eor	r23, r23
 652:	cb 01       	movw	r24, r22
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret

00000658 <__gesf2>:
 658:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_cmp>
 65c:	08 f4       	brcc	.+2      	; 0x660 <__gesf2+0x8>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	08 95       	ret

00000662 <__mulsf3>:
 662:	0e 94 44 03 	call	0x688	; 0x688 <__mulsf3x>
 666:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__fp_round>
 66a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscA>
 66e:	38 f0       	brcs	.+14     	; 0x67e <__mulsf3+0x1c>
 670:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_pscB>
 674:	20 f0       	brcs	.+8      	; 0x67e <__mulsf3+0x1c>
 676:	95 23       	and	r25, r21
 678:	11 f0       	breq	.+4      	; 0x67e <__mulsf3+0x1c>
 67a:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_inf>
 67e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_nan>
 682:	11 24       	eor	r1, r1
 684:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>

00000688 <__mulsf3x>:
 688:	0e 94 03 03 	call	0x606	; 0x606 <__fp_split3>
 68c:	70 f3       	brcs	.-36     	; 0x66a <__mulsf3+0x8>

0000068e <__mulsf3_pse>:
 68e:	95 9f       	mul	r25, r21
 690:	c1 f3       	breq	.-16     	; 0x682 <__mulsf3+0x20>
 692:	95 0f       	add	r25, r21
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	55 1f       	adc	r21, r21
 698:	62 9f       	mul	r22, r18
 69a:	f0 01       	movw	r30, r0
 69c:	72 9f       	mul	r23, r18
 69e:	bb 27       	eor	r27, r27
 6a0:	f0 0d       	add	r31, r0
 6a2:	b1 1d       	adc	r27, r1
 6a4:	63 9f       	mul	r22, r19
 6a6:	aa 27       	eor	r26, r26
 6a8:	f0 0d       	add	r31, r0
 6aa:	b1 1d       	adc	r27, r1
 6ac:	aa 1f       	adc	r26, r26
 6ae:	64 9f       	mul	r22, r20
 6b0:	66 27       	eor	r22, r22
 6b2:	b0 0d       	add	r27, r0
 6b4:	a1 1d       	adc	r26, r1
 6b6:	66 1f       	adc	r22, r22
 6b8:	82 9f       	mul	r24, r18
 6ba:	22 27       	eor	r18, r18
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	62 1f       	adc	r22, r18
 6c2:	73 9f       	mul	r23, r19
 6c4:	b0 0d       	add	r27, r0
 6c6:	a1 1d       	adc	r26, r1
 6c8:	62 1f       	adc	r22, r18
 6ca:	83 9f       	mul	r24, r19
 6cc:	a0 0d       	add	r26, r0
 6ce:	61 1d       	adc	r22, r1
 6d0:	22 1f       	adc	r18, r18
 6d2:	74 9f       	mul	r23, r20
 6d4:	33 27       	eor	r19, r19
 6d6:	a0 0d       	add	r26, r0
 6d8:	61 1d       	adc	r22, r1
 6da:	23 1f       	adc	r18, r19
 6dc:	84 9f       	mul	r24, r20
 6de:	60 0d       	add	r22, r0
 6e0:	21 1d       	adc	r18, r1
 6e2:	82 2f       	mov	r24, r18
 6e4:	76 2f       	mov	r23, r22
 6e6:	6a 2f       	mov	r22, r26
 6e8:	11 24       	eor	r1, r1
 6ea:	9f 57       	subi	r25, 0x7F	; 127
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	9a f0       	brmi	.+38     	; 0x716 <__mulsf3_pse+0x88>
 6f0:	f1 f0       	breq	.+60     	; 0x72e <__mulsf3_pse+0xa0>
 6f2:	88 23       	and	r24, r24
 6f4:	4a f0       	brmi	.+18     	; 0x708 <__mulsf3_pse+0x7a>
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__mulsf3_pse+0x64>
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	51 05       	cpc	r21, r1
 70c:	80 f0       	brcs	.+32     	; 0x72e <__mulsf3_pse+0xa0>
 70e:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_inf>
 712:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>
 716:	5f 3f       	cpi	r21, 0xFF	; 255
 718:	e4 f3       	brlt	.-8      	; 0x712 <__mulsf3_pse+0x84>
 71a:	98 3e       	cpi	r25, 0xE8	; 232
 71c:	d4 f3       	brlt	.-12     	; 0x712 <__mulsf3_pse+0x84>
 71e:	86 95       	lsr	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b7 95       	ror	r27
 726:	f7 95       	ror	r31
 728:	e7 95       	ror	r30
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	c1 f7       	brne	.-16     	; 0x71e <__mulsf3_pse+0x90>
 72e:	fe 2b       	or	r31, r30
 730:	88 0f       	add	r24, r24
 732:	91 1d       	adc	r25, r1
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
