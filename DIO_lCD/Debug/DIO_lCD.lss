
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f10  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a30  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089a  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006aa  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000764  00000000  00000000  000031fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000395e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  8a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_try>:
 *  Author: pc
 */ 
#include "SPI_TRY.h"
void SPI_try()
{
	SPI_Master_Intialize();
  92:	0e 94 84 01 	call	0x308	; 0x308 <SPI_Master_Intialize>
	while(1)
	{
		
	SPI_Master_Transmit('B');
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 a9 01 	call	0x352	; 0x352 <SPI_Master_Transmit>
  9c:	fc cf       	rjmp	.-8      	; 0x96 <SPI_try+0x4>

0000009e <main>:
#include "APP/SPI_TRY.h"

int main()
{

	SPI_try();
  9e:	0e 94 49 00 	call	0x92	; 0x92 <SPI_try>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x4>

000000a4 <__vector_16>:

//THIS SENTENCE IS SPECIAL TO ADC_MAX_NUMBER_OF_STEPS	KE PROCESSEOR NOT TO OPTIMIZE THE CODE AND DELETE THIS FUCNTION
void __vector_16(void) __attribute__((signal , used));

void __vector_16(void)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	
	if(ADC_CallBackPtr!=NULL)
  c6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ce:	30 97       	sbiw	r30, 0x00	; 0
  d0:	09 f0       	breq	.+2      	; 0xd4 <__vector_16+0x30>
	{
		
		ADC_CallBackPtr();
  d2:	09 95       	icall
		
	}
		
	
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	bf 91       	pop	r27
  da:	af 91       	pop	r26
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	7f 91       	pop	r23
  e2:	6f 91       	pop	r22
  e4:	5f 91       	pop	r21
  e6:	4f 91       	pop	r20
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <DIO_SetPinDirection>:
}


void DIO_SetPinDirection(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID,DIO_Direcrion Direction)
{
	if(Direction==Input)
  f6:	41 11       	cpse	r20, r1
  f8:	38 c0       	rjmp	.+112    	; 0x16a <DIO_SetPinDirection+0x74>
	{
		switch(Port_ID)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 f0       	breq	.+36     	; 0x122 <DIO_SetPinDirection+0x2c>
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_SetPinDirection+0x14>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	d9 f0       	breq	.+54     	; 0x13a <DIO_SetPinDirection+0x44>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	29 f1       	breq	.+74     	; 0x152 <DIO_SetPinDirection+0x5c>
 108:	08 95       	ret
		{
			case(PORTA):ClearBIT(DDRA_Reg,Pin_ID);break;
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPinDirection+0x20>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPinDirection+0x1c>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	08 95       	ret
			case(PORTB):ClearBIT(DDRB_Reg,Pin_ID);break;
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPinDirection+0x38>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPinDirection+0x34>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 138:	08 95       	ret
			case(PORTC):ClearBIT(DDRC_Reg,Pin_ID);break;
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0x50>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0x4c>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	84 bb       	out	0x14, r24	; 20
 150:	08 95       	ret
			case(PORTD):ClearBIT(DDRD_Reg,Pin_ID);break;
 152:	21 b3       	in	r18, 0x11	; 17
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_SetPinDirection+0x68>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_SetPinDirection+0x64>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	81 bb       	out	0x11, r24	; 17
 168:	08 95       	ret
		}
	}
	
	else if(Direction==Output)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	99 f5       	brne	.+102    	; 0x1d4 <DIO_SetPinDirection+0xde>
	{
		
		switch(Port_ID)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_SetPinDirection+0x9e>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPinDirection+0x88>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_SetPinDirection+0xb4>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_SetPinDirection+0xca>
 17c:	08 95       	ret
		{
				case(PORTA):SetBIT(DDRA_Reg,Pin_ID);break;
 17e:	2a b3       	in	r18, 0x1a	; 26
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDirection+0x94>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDirection+0x90>
 18e:	82 2b       	or	r24, r18
 190:	8a bb       	out	0x1a, r24	; 26
 192:	08 95       	ret
				case(PORTB):SetBIT(DDRB_Reg,Pin_ID);break;
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0xaa>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0xa6>
 1a4:	82 2b       	or	r24, r18
 1a6:	87 bb       	out	0x17, r24	; 23
 1a8:	08 95       	ret
				case(PORTC):SetBIT(DDRC_Reg,Pin_ID);break;
 1aa:	24 b3       	in	r18, 0x14	; 20
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinDirection+0xc0>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinDirection+0xbc>
 1ba:	82 2b       	or	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
				case(PORTD):SetBIT(DDRD_Reg,Pin_ID);break;
 1c0:	21 b3       	in	r18, 0x11	; 17
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinDirection+0xd6>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinDirection+0xd2>
 1d0:	82 2b       	or	r24, r18
 1d2:	81 bb       	out	0x11, r24	; 17
 1d4:	08 95       	ret

000001d6 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID, STD_Value Value)
{
	if(Value==HIGH)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	a1 f5       	brne	.+104    	; 0x242 <DIO_SetPinValue+0x6c>
	{
		switch(Port_ID)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	89 f0       	breq	.+34     	; 0x200 <DIO_SetPinValue+0x2a>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <DIO_SetPinValue+0x14>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	c9 f0       	breq	.+50     	; 0x216 <DIO_SetPinValue+0x40>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	11 f1       	breq	.+68     	; 0x22c <DIO_SetPinValue+0x56>
 1e8:	08 95       	ret
		{
			case(PORTA): SetBIT(PORTA_Reg,Pin_ID);break;
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinValue+0x20>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinValue+0x1c>
 1fa:	82 2b       	or	r24, r18
 1fc:	8b bb       	out	0x1b, r24	; 27
 1fe:	08 95       	ret
			case(PORTB): SetBIT(PORTB_Reg,Pin_ID);break;
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0x36>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0x32>
 210:	82 2b       	or	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
			case(PORTC): SetBIT(PORTC_Reg,Pin_ID);break;
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinValue+0x4c>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinValue+0x48>
 226:	82 2b       	or	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
			case(PORTD): SetBIT(PORTD_Reg,Pin_ID);break;
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinValue+0x62>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinValue+0x5e>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
			
		}
		
	}
	else if(Value==LOW)
 242:	41 11       	cpse	r20, r1
 244:	37 c0       	rjmp	.+110    	; 0x2b4 <DIO_SetPinValue+0xde>
	{
			switch(Port_ID)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	91 f0       	breq	.+36     	; 0x26e <DIO_SetPinValue+0x98>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_SetPinValue+0x80>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	d9 f0       	breq	.+54     	; 0x286 <DIO_SetPinValue+0xb0>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	29 f1       	breq	.+74     	; 0x29e <DIO_SetPinValue+0xc8>
 254:	08 95       	ret
			{
				case(PORTA): ClearBIT(PORTA_Reg,Pin_ID);break;
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPinValue+0x8c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPinValue+0x88>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	08 95       	ret
				case(PORTB): ClearBIT(PORTB_Reg,Pin_ID);break;
 26e:	28 b3       	in	r18, 0x18	; 24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinValue+0xa4>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinValue+0xa0>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	88 bb       	out	0x18, r24	; 24
 284:	08 95       	ret
				case(PORTC): ClearBIT(PORTC_Reg,Pin_ID);break;
 286:	25 b3       	in	r18, 0x15	; 21
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinValue+0xbc>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinValue+0xb8>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	85 bb       	out	0x15, r24	; 21
 29c:	08 95       	ret
				case(PORTD): ClearBIT(PORTD_Reg,Pin_ID);break;
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPinValue+0xd4>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPinValue+0xd0>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret

000002b6 <__vector_1>:
	EXTI_CallBackPtr=CopyFuncPTR;
}
//this prototype to prevent compiler from optimization of this function
void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	if(EXTI_CallBackPtr!=NULL)
 2d8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI_CallBackPtr>
 2dc:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI_CallBackPtr+0x1>
 2e0:	30 97       	sbiw	r30, 0x00	; 0
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <__vector_1+0x30>
		EXTI_CallBackPtr();
 2e4:	09 95       	icall
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <SPI_Master_Intialize>:

 void SPI_Master_Intialize()
 {
	//1) set MOSI ,SCK,SS as output pins and MISO to input pin
	 
		 DIO_SetPinDirection(PORTB,4,Output);//SS
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_SetPinDirection>
		 DIO_SetPinDirection(PORTB,5,Output);//MOSI
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	65 e0       	ldi	r22, 0x05	; 5
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_SetPinDirection>
		 DIO_SetPinDirection(PORTB,7,Output);//SCK
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	67 e0       	ldi	r22, 0x07	; 7
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_SetPinDirection>
		 DIO_SetPinDirection(PORTB,6,Input);//MISO
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_SetPinDirection>
	//enable SPI
		SetBIT(SPCR_REG,6);	 
 330:	8d b1       	in	r24, 0x0d	; 13
 332:	80 64       	ori	r24, 0x40	; 64
 334:	8d b9       	out	0x0d, r24	; 13
	//2) set SS pin to high	 
		DIO_SetPinValue(PORTB,4,HIGH);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	64 e0       	ldi	r22, 0x04	; 4
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_SetPinValue>
	//3) enable SPIin master mood
		 SPCR_REG |= SPI_Master_Mode;
 340:	8d b1       	in	r24, 0x0d	; 13
 342:	80 61       	ori	r24, 0x10	; 16
 344:	8d b9       	out	0x0d, r24	; 13
	//4) Choose prescaling 
		SPCR_REG |= SPI_Prescaling_Selector;
 346:	8d b1       	in	r24, 0x0d	; 13
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	8d b9       	out	0x0d, r24	; 13
	//5) choose speed 
		SPSR_REG |= SPI_Speed_Selector;		 
 34c:	8e b1       	in	r24, 0x0e	; 14
 34e:	8e b9       	out	0x0e, r24	; 14
 350:	08 95       	ret

00000352 <SPI_Master_Transmit>:
		 	
 }
  void SPI_Master_Transmit(uint8 SendByte)
  {
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
	  //pull SS to low
	  DIO_SetPinValue(PORTB,4,LOW);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	64 e0       	ldi	r22, 0x04	; 4
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_SetPinValue>
	  
	  //write data to SPDR register
	  SPDR_REG =SendByte;
 360:	cf b9       	out	0x0f, r28	; 15
	  
	  //WAIT until Transmit ends
	  while(!GetBIT(SPSR_REG,7));
 362:	77 9b       	sbis	0x0e, 7	; 14
 364:	fe cf       	rjmp	.-4      	; 0x362 <SPI_Master_Transmit+0x10>
	  
	  //flush received data 
	  uint8 flusher =SPDR_REG;
 366:	8f b1       	in	r24, 0x0f	; 15
	  
	  //set SS to high
	  DIO_SetPinValue(PORTB,4,HIGH);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_SetPinValue>
  }
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <__vector_11>:



void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	if(Timer_CallBackPtr!=NULL)
 398:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Timer_CallBackPtr>
 39c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Timer_CallBackPtr+0x1>
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <__vector_11+0x30>
		Timer_CallBackPtr();
 3a4:	09 95       	icall
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
