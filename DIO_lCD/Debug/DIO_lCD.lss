
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000081a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0e  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b90  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf1  00000000  00000000  00002fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00003cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb1  00000000  00000000  00004767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 10 02 	call	0x420	; 0x420 <main>
  8a:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Complete_Conv_ISR>:
#define potent			1
#define button			2
#define LED				3
uint16 counter;
void ADC_Complete_Conv_ISR()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	counter++;
  a6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <counter>
  aa:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <counter+0x1>
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <counter+0x1>
  b4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <counter>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  b8:	4a e0       	ldi	r20, 0x0A	; 10
  ba:	be 01       	movw	r22, r28
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	0e 94 9c 03 	call	0x738	; 0x738 <__itoa_ncheck>
	char Value_str[10];
	itoa(counter,Value_str,10);
	LCD_WriteString(Value_str,0,5);
  c4:	45 e0       	ldi	r20, 0x05	; 5
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_WriteString>
	
	
	
}
  d0:	2a 96       	adiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <ADC_interrupt_Lab>:

void ADC_interrupt_Lab()
{
	

DIO_SetPortDirection(PORTA,Output);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_SetPortDirection>
DIO_SetPortDirection(PORTB,Output);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_SetPortDirection>

DIO_SetPinDirection(PORTA,potent,Input);
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA,button,Input);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDirection>


ADC_Intialize();
 106:	0e 94 13 02 	call	0x426	; 0x426 <ADC_Intialize>
LCD_Intialize();
 10a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Intialize>
ADC_EnableInt();
 10e:	0e 94 35 02 	call	0x46a	; 0x46a <ADC_EnableInt>
Global_Interrupt_Enable();
 112:	0e 94 98 03 	call	0x730	; 0x730 <Global_Interrupt_Enable>



ADC_SetCallback(ADC_Complete_Conv_ISR);
 116:	89 e4       	ldi	r24, 0x49	; 73
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 39 02 	call	0x472	; 0x472 <ADC_SetCallback>
ADC_Intialize();
 11e:	0e 94 13 02 	call	0x426	; 0x426 <ADC_Intialize>
ADC_StartConversion(potent);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 2b 02 	call	0x456	; 0x456 <ADC_StartConversion>
while(1)

{
	ADC_StartConversion(potent);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 2b 02 	call	0x456	; 0x456 <ADC_StartConversion>
DIO_SetPinValue(PORTB,6,HIGH);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	66 e0       	ldi	r22, 0x06	; 6
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e9       	ldi	r18, 0x9F	; 159
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <ADC_interrupt_Lab+0x5c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <ADC_interrupt_Lab+0x66>
 148:	00 00       	nop
_delay_ms(500);
DIO_SetPinValue(PORTB,6,LOW);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
 154:	2f e9       	ldi	r18, 0x9F	; 159
 156:	86 e8       	ldi	r24, 0x86	; 134
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <ADC_interrupt_Lab+0x78>
 162:	00 c0       	rjmp	.+0      	; 0x164 <ADC_interrupt_Lab+0x82>
 164:	00 00       	nop
 166:	e0 cf       	rjmp	.-64     	; 0x128 <ADC_interrupt_Lab+0x46>

00000168 <LCD_WriteCmd>:


static uint8 InitStepFinished = 0;

void LCD_WriteCmd(uint8 Cmd)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(PORTB,PIN1,LOW);//RS and R/W should be low to write command
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	DIO_SetPinValue(PORTB,PIN2,LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	
	
	DIO_SetPinValue(PORTA,PIN4,GetBIT(Cmd,4));
 180:	c4 fb       	bst	r28, 4
 182:	44 27       	eor	r20, r20
 184:	40 f9       	bld	r20, 0
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,PIN5,GetBIT(Cmd,5));
 18e:	c5 fb       	bst	r28, 5
 190:	44 27       	eor	r20, r20
 192:	40 f9       	bld	r20, 0
 194:	65 e0       	ldi	r22, 0x05	; 5
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,PIN6,GetBIT(Cmd,6));
 19c:	c6 fb       	bst	r28, 6
 19e:	44 27       	eor	r20, r20
 1a0:	40 f9       	bld	r20, 0
 1a2:	66 e0       	ldi	r22, 0x06	; 6
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,PIN7,GetBIT(Cmd,7));
 1aa:	4c 2f       	mov	r20, r28
 1ac:	44 1f       	adc	r20, r20
 1ae:	44 27       	eor	r20, r20
 1b0:	44 1f       	adc	r20, r20
 1b2:	67 e0       	ldi	r22, 0x07	; 7
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	
	//delay and reading by down Edge
	
					//
					DIO_SetPinValue(PORTB,PIN3,HIGH);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
 1c4:	83 ec       	ldi	r24, 0xC3	; 195
 1c6:	99 e0       	ldi	r25, 0x09	; 9
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_WriteCmd+0x60>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_WriteCmd+0x66>
 1ce:	00 00       	nop
					_delay_ms(1);                       //delay for reading block
					DIO_SetPinValue(PORTB,PIN3,LOW);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	
					//
	if(InitStepFinished)
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1de:	88 23       	and	r24, r24
 1e0:	59 f1       	breq	.+86     	; 0x238 <LCD_WriteCmd+0xd0>
	{
		
		DIO_SetPinValue(PORTA,PIN4,GetBIT(Cmd,0));
 1e2:	4c 2f       	mov	r20, r28
 1e4:	41 70       	andi	r20, 0x01	; 1
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN5,GetBIT(Cmd,1));
 1ee:	c1 fb       	bst	r28, 1
 1f0:	44 27       	eor	r20, r20
 1f2:	40 f9       	bld	r20, 0
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN6,GetBIT(Cmd,2));
 1fc:	c2 fb       	bst	r28, 2
 1fe:	44 27       	eor	r20, r20
 200:	40 f9       	bld	r20, 0
 202:	66 e0       	ldi	r22, 0x06	; 6
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN7,GetBIT(Cmd,3));
 20a:	c3 fb       	bst	r28, 3
 20c:	44 27       	eor	r20, r20
 20e:	40 f9       	bld	r20, 0
 210:	67 e0       	ldi	r22, 0x07	; 7
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>

		//delay and reading by down Edge
		
					//
					DIO_SetPinValue(PORTB,PIN3,HIGH);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
 222:	83 ec       	ldi	r24, 0xC3	; 195
 224:	99 e0       	ldi	r25, 0x09	; 9
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_WriteCmd+0xbe>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_WriteCmd+0xc4>
 22c:	00 00       	nop
					_delay_ms(1);                       //delay for reading block
					DIO_SetPinValue(PORTB,PIN3,LOW);
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		
					//
	}
	
	
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <LCD_Intialize>:
void LCD_Intialize()
{
	DIO_SetPortDirection(PORTA,Output);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTB,Output);//for control pins
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_SetPortDirection>
 24c:	2f e5       	ldi	r18, 0x5F	; 95
 24e:	8a ee       	ldi	r24, 0xEA	; 234
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <LCD_Intialize+0x16>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_Intialize+0x20>
 25c:	00 00       	nop
	_delay_ms(30);
	LCD_WriteCmd(0x20);///intialize orders
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
	LCD_WriteCmd(0x20);
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
	LCD_WriteCmd(0x80);
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
 270:	83 ec       	ldi	r24, 0xC3	; 195
 272:	99 e0       	ldi	r25, 0x09	; 9
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_Intialize+0x38>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_Intialize+0x3e>
 27a:	00 00       	nop
	_delay_ms(1);
	LCD_WriteCmd(0x00);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
	LCD_WriteCmd(0xf0);
 282:	80 ef       	ldi	r24, 0xF0	; 240
 284:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
 288:	83 ec       	ldi	r24, 0xC3	; 195
 28a:	99 e0       	ldi	r25, 0x09	; 9
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_Intialize+0x50>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_Intialize+0x56>
 292:	00 00       	nop
	_delay_ms(1);
	LCD_WriteCmd(0x00);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
	LCD_WriteCmd(0x10);
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
 2a0:	87 e8       	ldi	r24, 0x87	; 135
 2a2:	93 e1       	ldi	r25, 0x13	; 19
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Intialize+0x68>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Intialize+0x6e>
 2aa:	00 00       	nop
	_delay_ms(2);
	
	InitStepFinished=1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	08 95       	ret

000002b4 <LCD_WriteData>:
	
}

void LCD_WriteData(uint8 Data)
{
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
		DIO_SetPinValue(PORTB,PIN1,HIGH);//RS and R/W should be high and  low to write Data
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTB,PIN2,LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	
	
		DIO_SetPinValue(PORTA,PIN4,GetBIT(Data,4));
 2cc:	c4 fb       	bst	r28, 4
 2ce:	44 27       	eor	r20, r20
 2d0:	40 f9       	bld	r20, 0
 2d2:	64 e0       	ldi	r22, 0x04	; 4
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN5,GetBIT(Data,5));
 2da:	c5 fb       	bst	r28, 5
 2dc:	44 27       	eor	r20, r20
 2de:	40 f9       	bld	r20, 0
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN6,GetBIT(Data,6));
 2e8:	c6 fb       	bst	r28, 6
 2ea:	44 27       	eor	r20, r20
 2ec:	40 f9       	bld	r20, 0
 2ee:	66 e0       	ldi	r22, 0x06	; 6
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN7,GetBIT(Data,7));
 2f6:	4c 2f       	mov	r20, r28
 2f8:	44 1f       	adc	r20, r20
 2fa:	44 27       	eor	r20, r20
 2fc:	44 1f       	adc	r20, r20
 2fe:	67 e0       	ldi	r22, 0x07	; 7
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	
							//delay and reading by down Edge
	
							//
							DIO_SetPinValue(PORTB,PIN3,HIGH);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
 310:	83 ec       	ldi	r24, 0xC3	; 195
 312:	99 e0       	ldi	r25, 0x09	; 9
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_WriteData+0x60>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_WriteData+0x66>
 31a:	00 00       	nop
							_delay_ms(1);                       //delay for reading block
							DIO_SetPinValue(PORTB,PIN3,LOW);
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
	
							//
	
		
		DIO_SetPinValue(PORTA,PIN4,GetBIT(Data,0));
 326:	4c 2f       	mov	r20, r28
 328:	41 70       	andi	r20, 0x01	; 1
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN5,GetBIT(Data,1));
 332:	c1 fb       	bst	r28, 1
 334:	44 27       	eor	r20, r20
 336:	40 f9       	bld	r20, 0
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN6,GetBIT(Data,2));
 340:	c2 fb       	bst	r28, 2
 342:	44 27       	eor	r20, r20
 344:	40 f9       	bld	r20, 0
 346:	66 e0       	ldi	r22, 0x06	; 6
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN7,GetBIT(Data,3));
 34e:	c3 fb       	bst	r28, 3
 350:	44 27       	eor	r20, r20
 352:	40 f9       	bld	r20, 0
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>

							//delay and reading by down Edge
		
							//
							DIO_SetPinValue(PORTB,PIN3,HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
 366:	83 ec       	ldi	r24, 0xC3	; 195
 368:	99 e0       	ldi	r25, 0x09	; 9
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_WriteData+0xb6>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_WriteData+0xbc>
 370:	00 00       	nop
							_delay_ms(1);                       //delay for reading block
							DIO_SetPinValue(PORTB,PIN3,LOW);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_SetPinValue>
		
							//
	
	
	
}
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <LCD_GoToPos>:
void LCD_GoToPos(uint8 Row,uint8 Column)
{
	if((Row<2)&&(Column<16))
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	50 f4       	brcc	.+20     	; 0x398 <LCD_GoToPos+0x18>
 384:	60 31       	cpi	r22, 0x10	; 16
 386:	40 f4       	brcc	.+16     	; 0x398 <LCD_GoToPos+0x18>
	{
		uint8 Address=(Row*0x40)+Column;
 388:	90 e4       	ldi	r25, 0x40	; 64
 38a:	89 9f       	mul	r24, r25
 38c:	60 0d       	add	r22, r0
 38e:	11 24       	eor	r1, r1
 390:	86 2f       	mov	r24, r22
		SetBIT(Address,7);
		LCD_WriteCmd(Address);
 392:	80 68       	ori	r24, 0x80	; 128
 394:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_WriteCmd>
 398:	08 95       	ret

0000039a <LCD_WriteString>:
	}
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	8c 01       	movw	r16, r24
 3a8:	d6 2f       	mov	r29, r22
 3aa:	f4 2e       	mov	r15, r20
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
 3ac:	64 2f       	mov	r22, r20
 3ae:	8d 2f       	mov	r24, r29
 3b0:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_GoToPos>
		LCD_WriteCmd(Address);
	}
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
	uint8 Line0=0;//for row indexing
 3b4:	e1 2c       	mov	r14, r1
		SetBIT(Address,7);
		LCD_WriteCmd(Address);
	}
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
	while ((Str[Index]!='\0')&&((Row*16)+Index+Column)<32)//while ends by ending of string
 3b8:	1a c0       	rjmp	.+52     	; 0x3ee <LCD_WriteString+0x54>
	{
		if (((Row*16)+Index+Column)<16)//for the first row indexing
 3ba:	20 31       	cpi	r18, 0x10	; 16
 3bc:	31 05       	cpc	r19, r1
 3be:	24 f4       	brge	.+8      	; 0x3c8 <LCD_WriteString+0x2e>
		{
			LCD_WriteData(Str[Index]);
 3c0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_WriteData>
			Index++;
 3c4:	cf 5f       	subi	r28, 0xFF	; 255
 3c6:	13 c0       	rjmp	.+38     	; 0x3ee <LCD_WriteString+0x54>
		}
		else if((((Row*16)+Index+Column)==16))//for the end of first row indexing and going to the second
 3c8:	20 31       	cpi	r18, 0x10	; 16
 3ca:	31 05       	cpc	r19, r1
 3cc:	39 f4       	brne	.+14     	; 0x3dc <LCD_WriteString+0x42>
		{
			LCD_GoToPos(1,0);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_GoToPos>
			Line0=1;
 3d6:	ee 24       	eor	r14, r14
 3d8:	e3 94       	inc	r14
 3da:	09 c0       	rjmp	.+18     	; 0x3ee <LCD_WriteString+0x54>
		}
		else if(((Row*16)+Index+Column)<32&&Line0==1)//for the second row indexing
 3dc:	20 32       	cpi	r18, 0x20	; 32
 3de:	31 05       	cpc	r19, r1
 3e0:	34 f4       	brge	.+12     	; 0x3ee <LCD_WriteString+0x54>
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	e9 12       	cpse	r14, r25
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <LCD_WriteString+0x54>
		{
			LCD_WriteData(Str[Index]);
 3e8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_WriteData>
			Index++;
 3ec:	cf 5f       	subi	r28, 0xFF	; 255
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
	while ((Str[Index]!='\0')&&((Row*16)+Index+Column)<32)//while ends by ending of string
 3ee:	f8 01       	movw	r30, r16
 3f0:	ec 0f       	add	r30, r28
 3f2:	f1 1d       	adc	r31, r1
 3f4:	80 81       	ld	r24, Z
 3f6:	88 23       	and	r24, r24
 3f8:	61 f0       	breq	.+24     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fa:	2c 2f       	mov	r18, r28
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	90 e1       	ldi	r25, 0x10	; 16
 400:	d9 9f       	mul	r29, r25
 402:	20 0d       	add	r18, r0
 404:	31 1d       	adc	r19, r1
 406:	11 24       	eor	r1, r1
 408:	2f 0d       	add	r18, r15
 40a:	31 1d       	adc	r19, r1
 40c:	20 32       	cpi	r18, 0x20	; 32
 40e:	31 05       	cpc	r19, r1
 410:	a4 f2       	brlt	.-88     	; 0x3ba <LCD_WriteString+0x20>
		{
			LCD_WriteData(Str[Index]);
			Index++;
		}
	}
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	08 95       	ret

00000420 <main>:
int main()
{
	
	//ADC_LAB();
	//Sev_Seg(11,0.1);
	ADC_interrupt_Lab();
 420:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_interrupt_Lab>
 424:	ff cf       	rjmp	.-2      	; 0x424 <main+0x4>

00000426 <ADC_Intialize>:
{
	SetBIT(ADCSRA_REG,3);
}
void ADC_DisableInt()
{
	ClearBIT(ADCSRA_REG,3);
 426:	87 b1       	in	r24, 0x07	; 7
 428:	8f 73       	andi	r24, 0x3F	; 63
 42a:	87 b9       	out	0x07, r24	; 7
 42c:	87 b1       	in	r24, 0x07	; 7
 42e:	80 64       	ori	r24, 0x40	; 64
 430:	87 b9       	out	0x07, r24	; 7
 432:	86 b1       	in	r24, 0x06	; 6
 434:	80 62       	ori	r24, 0x20	; 32
 436:	86 b9       	out	0x06, r24	; 6
 438:	80 b7       	in	r24, 0x30	; 48
 43a:	8f 71       	andi	r24, 0x1F	; 31
 43c:	80 bf       	out	0x30, r24	; 48
 43e:	80 b7       	in	r24, 0x30	; 48
 440:	80 bf       	out	0x30, r24	; 48
 442:	87 b1       	in	r24, 0x07	; 7
 444:	8f 7d       	andi	r24, 0xDF	; 223
 446:	87 b9       	out	0x07, r24	; 7
 448:	86 b1       	in	r24, 0x06	; 6
 44a:	80 61       	ori	r24, 0x10	; 16
 44c:	86 b9       	out	0x06, r24	; 6
 44e:	86 b1       	in	r24, 0x06	; 6
 450:	80 68       	ori	r24, 0x80	; 128
 452:	86 b9       	out	0x06, r24	; 6
 454:	08 95       	ret

00000456 <ADC_StartConversion>:
 456:	97 b1       	in	r25, 0x07	; 7
 458:	90 7e       	andi	r25, 0xE0	; 224
 45a:	97 b9       	out	0x07, r25	; 7
 45c:	97 b1       	in	r25, 0x07	; 7
 45e:	89 2b       	or	r24, r25
 460:	87 b9       	out	0x07, r24	; 7
 462:	86 b1       	in	r24, 0x06	; 6
 464:	80 64       	ori	r24, 0x40	; 64
 466:	86 b9       	out	0x06, r24	; 6
 468:	08 95       	ret

0000046a <ADC_EnableInt>:
 46a:	86 b1       	in	r24, 0x06	; 6
 46c:	88 60       	ori	r24, 0x08	; 8
 46e:	86 b9       	out	0x06, r24	; 6
 470:	08 95       	ret

00000472 <ADC_SetCallback>:
//ADC INTERRUPT SETCALLBACK FUNCTION


void ADC_SetCallback(void(*CopyFuncPTR)(void))
{
	ADC_CallBackPtr=CopyFuncPTR;
 472:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <ADC_CallBackPtr+0x1>
 476:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ADC_CallBackPtr>
 47a:	08 95       	ret

0000047c <__vector_16>:

//THIS SENTENCE IS SPECIAL TO ADC_MAX_NUMBER_OF_STEPS	KE PROCESSEOR NOT TO OPTIMIZE THE CODE AND DELETE THIS FUCNTION
void __vector_16(void) __attribute__((signal , used));

void __vector_16(void)
{
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	
	if(ADC_CallBackPtr!=NULL)
 49e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ADC_CallBackPtr>
 4a2:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ADC_CallBackPtr+0x1>
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__vector_16+0x30>
	{
		
		ADC_CallBackPtr();
 4aa:	09 95       	icall
		
	}
		
	
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <DIO_SetPortDirection>:
	switch(Port_ID)
	{
		case(PORTA): PORTA_Reg  =Value;break;
		case(PORTB): PORTB_Reg = Value;break;
		case(PORTC): PORTC_Reg = Value;break;
		case(PORTD): PORTD_Reg = Value;break;
 4ce:	61 30       	cpi	r22, 0x01	; 1
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <DIO_SetPortDirection+0x2c>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <DIO_SetPortDirection+0x1a>
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <DIO_SetPortDirection+0x14>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	49 f0       	breq	.+18     	; 0x4ee <DIO_SetPortDirection+0x20>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	51 f0       	breq	.+20     	; 0x4f4 <DIO_SetPortDirection+0x26>
 4e0:	08 95       	ret
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	8a bb       	out	0x1a, r24	; 26
 4e6:	08 95       	ret
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	87 bb       	out	0x17, r24	; 23
 4ec:	08 95       	ret
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	84 bb       	out	0x14, r24	; 20
 4f2:	08 95       	ret
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	81 bb       	out	0x11, r24	; 17
 4f8:	08 95       	ret
 4fa:	61 11       	cpse	r22, r1
 4fc:	0f c0       	rjmp	.+30     	; 0x51c <DIO_SetPortDirection+0x4e>
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	41 f0       	breq	.+16     	; 0x512 <DIO_SetPortDirection+0x44>
 502:	28 f0       	brcs	.+10     	; 0x50e <DIO_SetPortDirection+0x40>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	39 f0       	breq	.+14     	; 0x516 <DIO_SetPortDirection+0x48>
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	39 f0       	breq	.+14     	; 0x51a <DIO_SetPortDirection+0x4c>
 50c:	08 95       	ret
 50e:	1a ba       	out	0x1a, r1	; 26
 510:	08 95       	ret
 512:	17 ba       	out	0x17, r1	; 23
 514:	08 95       	ret
 516:	14 ba       	out	0x14, r1	; 20
 518:	08 95       	ret
 51a:	11 ba       	out	0x11, r1	; 17
 51c:	08 95       	ret

0000051e <DIO_SetPinDirection>:
}


void DIO_SetPinDirection(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID,DIO_Direcrion Direction)
{
	if(Direction==Input)
 51e:	41 11       	cpse	r20, r1
 520:	38 c0       	rjmp	.+112    	; 0x592 <DIO_SetPinDirection+0x74>
	{
		switch(Port_ID)
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	91 f0       	breq	.+36     	; 0x54a <DIO_SetPinDirection+0x2c>
 526:	28 f0       	brcs	.+10     	; 0x532 <DIO_SetPinDirection+0x14>
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	d9 f0       	breq	.+54     	; 0x562 <DIO_SetPinDirection+0x44>
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	29 f1       	breq	.+74     	; 0x57a <DIO_SetPinDirection+0x5c>
 530:	08 95       	ret
		{
			case(PORTA):ClearBIT(DDRA_Reg,Pin_ID);break;
 532:	2a b3       	in	r18, 0x1a	; 26
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_SetPinDirection+0x20>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_SetPinDirection+0x1c>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	8a bb       	out	0x1a, r24	; 26
 548:	08 95       	ret
			case(PORTB):ClearBIT(DDRB_Reg,Pin_ID);break;
 54a:	27 b3       	in	r18, 0x17	; 23
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_SetPinDirection+0x38>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_SetPinDirection+0x34>
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	87 bb       	out	0x17, r24	; 23
 560:	08 95       	ret
			case(PORTC):ClearBIT(DDRC_Reg,Pin_ID);break;
 562:	24 b3       	in	r18, 0x14	; 20
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_SetPinDirection+0x50>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_SetPinDirection+0x4c>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	84 bb       	out	0x14, r24	; 20
 578:	08 95       	ret
			case(PORTD):ClearBIT(DDRD_Reg,Pin_ID);break;
 57a:	21 b3       	in	r18, 0x11	; 17
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_SetPinDirection+0x68>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_SetPinDirection+0x64>
 58a:	80 95       	com	r24
 58c:	82 23       	and	r24, r18
 58e:	81 bb       	out	0x11, r24	; 17
 590:	08 95       	ret
		}
	}
	
	else if(Direction==Output)
 592:	41 30       	cpi	r20, 0x01	; 1
 594:	99 f5       	brne	.+102    	; 0x5fc <DIO_SetPinDirection+0xde>
	{
		
		switch(Port_ID)
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	89 f0       	breq	.+34     	; 0x5bc <DIO_SetPinDirection+0x9e>
 59a:	28 f0       	brcs	.+10     	; 0x5a6 <DIO_SetPinDirection+0x88>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	c9 f0       	breq	.+50     	; 0x5d2 <DIO_SetPinDirection+0xb4>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	11 f1       	breq	.+68     	; 0x5e8 <DIO_SetPinDirection+0xca>
 5a4:	08 95       	ret
		{
				case(PORTA):SetBIT(DDRA_Reg,Pin_ID);break;
 5a6:	2a b3       	in	r18, 0x1a	; 26
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_SetPinDirection+0x94>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_SetPinDirection+0x90>
 5b6:	82 2b       	or	r24, r18
 5b8:	8a bb       	out	0x1a, r24	; 26
 5ba:	08 95       	ret
				case(PORTB):SetBIT(DDRB_Reg,Pin_ID);break;
 5bc:	27 b3       	in	r18, 0x17	; 23
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_SetPinDirection+0xaa>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_SetPinDirection+0xa6>
 5cc:	82 2b       	or	r24, r18
 5ce:	87 bb       	out	0x17, r24	; 23
 5d0:	08 95       	ret
				case(PORTC):SetBIT(DDRC_Reg,Pin_ID);break;
 5d2:	24 b3       	in	r18, 0x14	; 20
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_SetPinDirection+0xc0>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_SetPinDirection+0xbc>
 5e2:	82 2b       	or	r24, r18
 5e4:	84 bb       	out	0x14, r24	; 20
 5e6:	08 95       	ret
				case(PORTD):SetBIT(DDRD_Reg,Pin_ID);break;
 5e8:	21 b3       	in	r18, 0x11	; 17
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_SetPinDirection+0xd6>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_SetPinDirection+0xd2>
 5f8:	82 2b       	or	r24, r18
 5fa:	81 bb       	out	0x11, r24	; 17
 5fc:	08 95       	ret

000005fe <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID, STD_Value Value)
{
	if(Value==HIGH)
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	a1 f5       	brne	.+104    	; 0x66a <DIO_SetPinValue+0x6c>
	{
		switch(Port_ID)
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	89 f0       	breq	.+34     	; 0x628 <DIO_SetPinValue+0x2a>
 606:	28 f0       	brcs	.+10     	; 0x612 <DIO_SetPinValue+0x14>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	c9 f0       	breq	.+50     	; 0x63e <DIO_SetPinValue+0x40>
 60c:	83 30       	cpi	r24, 0x03	; 3
 60e:	11 f1       	breq	.+68     	; 0x654 <DIO_SetPinValue+0x56>
 610:	08 95       	ret
		{
			case(PORTA): SetBIT(PORTA_Reg,Pin_ID);break;
 612:	2b b3       	in	r18, 0x1b	; 27
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_SetPinValue+0x20>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_SetPinValue+0x1c>
 622:	82 2b       	or	r24, r18
 624:	8b bb       	out	0x1b, r24	; 27
 626:	08 95       	ret
			case(PORTB): SetBIT(PORTB_Reg,Pin_ID);break;
 628:	28 b3       	in	r18, 0x18	; 24
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_SetPinValue+0x36>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_SetPinValue+0x32>
 638:	82 2b       	or	r24, r18
 63a:	88 bb       	out	0x18, r24	; 24
 63c:	08 95       	ret
			case(PORTC): SetBIT(PORTC_Reg,Pin_ID);break;
 63e:	25 b3       	in	r18, 0x15	; 21
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_SetPinValue+0x4c>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_SetPinValue+0x48>
 64e:	82 2b       	or	r24, r18
 650:	85 bb       	out	0x15, r24	; 21
 652:	08 95       	ret
			case(PORTD): SetBIT(PORTD_Reg,Pin_ID);break;
 654:	22 b3       	in	r18, 0x12	; 18
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_SetPinValue+0x62>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_SetPinValue+0x5e>
 664:	82 2b       	or	r24, r18
 666:	82 bb       	out	0x12, r24	; 18
 668:	08 95       	ret
			
		}
		
	}
	else if(Value==LOW)
 66a:	41 11       	cpse	r20, r1
 66c:	37 c0       	rjmp	.+110    	; 0x6dc <DIO_SetPinValue+0xde>
	{
			switch(Port_ID)
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	91 f0       	breq	.+36     	; 0x696 <DIO_SetPinValue+0x98>
 672:	28 f0       	brcs	.+10     	; 0x67e <DIO_SetPinValue+0x80>
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	d9 f0       	breq	.+54     	; 0x6ae <DIO_SetPinValue+0xb0>
 678:	83 30       	cpi	r24, 0x03	; 3
 67a:	29 f1       	breq	.+74     	; 0x6c6 <DIO_SetPinValue+0xc8>
 67c:	08 95       	ret
			{
				case(PORTA): ClearBIT(PORTA_Reg,Pin_ID);break;
 67e:	2b b3       	in	r18, 0x1b	; 27
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_SetPinValue+0x8c>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_SetPinValue+0x88>
 68e:	80 95       	com	r24
 690:	82 23       	and	r24, r18
 692:	8b bb       	out	0x1b, r24	; 27
 694:	08 95       	ret
				case(PORTB): ClearBIT(PORTB_Reg,Pin_ID);break;
 696:	28 b3       	in	r18, 0x18	; 24
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_SetPinValue+0xa4>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_SetPinValue+0xa0>
 6a6:	80 95       	com	r24
 6a8:	82 23       	and	r24, r18
 6aa:	88 bb       	out	0x18, r24	; 24
 6ac:	08 95       	ret
				case(PORTC): ClearBIT(PORTC_Reg,Pin_ID);break;
 6ae:	25 b3       	in	r18, 0x15	; 21
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_SetPinValue+0xbc>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_SetPinValue+0xb8>
 6be:	80 95       	com	r24
 6c0:	82 23       	and	r24, r18
 6c2:	85 bb       	out	0x15, r24	; 21
 6c4:	08 95       	ret
				case(PORTD): ClearBIT(PORTD_Reg,Pin_ID);break;
 6c6:	22 b3       	in	r18, 0x12	; 18
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_SetPinValue+0xd4>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_SetPinValue+0xd0>
 6d6:	80 95       	com	r24
 6d8:	82 23       	and	r24, r18
 6da:	82 bb       	out	0x12, r24	; 18
 6dc:	08 95       	ret

000006de <__vector_1>:
	CallBackPtr=CopyFuncPTR;
}
//this prototype to prevent compiler from optimization of this function
void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 6de:	1f 92       	push	r1
 6e0:	0f 92       	push	r0
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	0f 92       	push	r0
 6e6:	11 24       	eor	r1, r1
 6e8:	2f 93       	push	r18
 6ea:	3f 93       	push	r19
 6ec:	4f 93       	push	r20
 6ee:	5f 93       	push	r21
 6f0:	6f 93       	push	r22
 6f2:	7f 93       	push	r23
 6f4:	8f 93       	push	r24
 6f6:	9f 93       	push	r25
 6f8:	af 93       	push	r26
 6fa:	bf 93       	push	r27
 6fc:	ef 93       	push	r30
 6fe:	ff 93       	push	r31
	if(CallBackPtr!=NULL)
 700:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <CallBackPtr>
 704:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <CallBackPtr+0x1>
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	09 f0       	breq	.+2      	; 0x70e <__vector_1+0x30>
		CallBackPtr();
 70c:	09 95       	icall
 70e:	ff 91       	pop	r31
 710:	ef 91       	pop	r30
 712:	bf 91       	pop	r27
 714:	af 91       	pop	r26
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	7f 91       	pop	r23
 71c:	6f 91       	pop	r22
 71e:	5f 91       	pop	r21
 720:	4f 91       	pop	r20
 722:	3f 91       	pop	r19
 724:	2f 91       	pop	r18
 726:	0f 90       	pop	r0
 728:	0f be       	out	0x3f, r0	; 63
 72a:	0f 90       	pop	r0
 72c:	1f 90       	pop	r1
 72e:	18 95       	reti

00000730 <Global_Interrupt_Enable>:


static void (*CallBackPtr)(void);
void Global_Interrupt_Enable()
{
	SetBIT(SREG_REG,GIE_ENABLE_BIT);
 730:	8f b7       	in	r24, 0x3f	; 63
 732:	80 68       	ori	r24, 0x80	; 128
 734:	8f bf       	out	0x3f, r24	; 63
 736:	08 95       	ret

00000738 <__itoa_ncheck>:
 738:	bb 27       	eor	r27, r27
 73a:	4a 30       	cpi	r20, 0x0A	; 10
 73c:	31 f4       	brne	.+12     	; 0x74a <__itoa_ncheck+0x12>
 73e:	99 23       	and	r25, r25
 740:	22 f4       	brpl	.+8      	; 0x74a <__itoa_ncheck+0x12>
 742:	bd e2       	ldi	r27, 0x2D	; 45
 744:	90 95       	com	r25
 746:	81 95       	neg	r24
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	0c 94 a8 03 	jmp	0x750	; 0x750 <__utoa_common>

0000074e <__utoa_ncheck>:
 74e:	bb 27       	eor	r27, r27

00000750 <__utoa_common>:
 750:	fb 01       	movw	r30, r22
 752:	55 27       	eor	r21, r21
 754:	aa 27       	eor	r26, r26
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	aa 1f       	adc	r26, r26
 75c:	a4 17       	cp	r26, r20
 75e:	10 f0       	brcs	.+4      	; 0x764 <__utoa_common+0x14>
 760:	a4 1b       	sub	r26, r20
 762:	83 95       	inc	r24
 764:	50 51       	subi	r21, 0x10	; 16
 766:	b9 f7       	brne	.-18     	; 0x756 <__utoa_common+0x6>
 768:	a0 5d       	subi	r26, 0xD0	; 208
 76a:	aa 33       	cpi	r26, 0x3A	; 58
 76c:	08 f0       	brcs	.+2      	; 0x770 <__utoa_common+0x20>
 76e:	a9 5d       	subi	r26, 0xD9	; 217
 770:	a1 93       	st	Z+, r26
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	79 f7       	brne	.-34     	; 0x754 <__utoa_common+0x4>
 776:	b1 11       	cpse	r27, r1
 778:	b1 93       	st	Z+, r27
 77a:	11 92       	st	Z+, r1
 77c:	cb 01       	movw	r24, r22
 77e:	0c 94 c1 03 	jmp	0x782	; 0x782 <strrev>

00000782 <strrev>:
 782:	dc 01       	movw	r26, r24
 784:	fc 01       	movw	r30, r24
 786:	67 2f       	mov	r22, r23
 788:	71 91       	ld	r23, Z+
 78a:	77 23       	and	r23, r23
 78c:	e1 f7       	brne	.-8      	; 0x786 <strrev+0x4>
 78e:	32 97       	sbiw	r30, 0x02	; 2
 790:	04 c0       	rjmp	.+8      	; 0x79a <strrev+0x18>
 792:	7c 91       	ld	r23, X
 794:	6d 93       	st	X+, r22
 796:	70 83       	st	Z, r23
 798:	62 91       	ld	r22, -Z
 79a:	ae 17       	cp	r26, r30
 79c:	bf 07       	cpc	r27, r31
 79e:	c8 f3       	brcs	.-14     	; 0x792 <strrev+0x10>
 7a0:	08 95       	ret

000007a2 <_exit>:
 7a2:	f8 94       	cli

000007a4 <__stop_program>:
 7a4:	ff cf       	rjmp	.-2      	; 0x7a4 <__stop_program>
