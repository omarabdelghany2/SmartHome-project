
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6c  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1c  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c5  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000735  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000370b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Start>:
#include "UART_ECHO_TRY.h"

#include "../MCAL/TIMER/TIMER.h"
void UART_Start()
{	
	UART_Intialize();
  92:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <UART_Intialize>
	uint8 received=0;
	DIO_SetPortDirection(PORTA,Output);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 80 00 	call	0x100	; 0x100 <DIO_SetPortDirection>
	while(1)
	{
		
		received=UART_Receive();
  9e:	0e 94 15 01 	call	0x22a	; 0x22a <UART_Receive>
		UART_Transmit(received);
  a2:	0e 94 11 01 	call	0x222	; 0x222 <UART_Transmit>
  a6:	fb cf       	rjmp	.-10     	; 0x9e <UART_Start+0xc>

000000a8 <main>:

#include "APP/UART_ECHO_TRY.h"
int main()
{

	UART_Start();
  a8:	0e 94 49 00 	call	0x92	; 0x92 <UART_Start>
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x4>

000000ae <__vector_16>:

//THIS SENTENCE IS SPECIAL TO ADC_MAX_NUMBER_OF_STEPS	KE PROCESSEOR NOT TO OPTIMIZE THE CODE AND DELETE THIS FUCNTION
void __vector_16(void) __attribute__((signal , used));

void __vector_16(void)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	
	if(ADC_CallBackPtr!=NULL)
  d0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d8:	30 97       	sbiw	r30, 0x00	; 0
  da:	09 f0       	breq	.+2      	; 0xde <__vector_16+0x30>
	{
		
		ADC_CallBackPtr();
  dc:	09 95       	icall
		
	}
		
	
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <DIO_SetPortDirection>:
#include "../../LIB/BIT_Math.h"
#include "DIO.h"

void DIO_SetPortDirection(DIO_Port_ID Port_ID,DIO_Direcrion Direction)
{
	if(Output==Direction)
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	a1 f4       	brne	.+40     	; 0x12c <DIO_SetPortDirection+0x2c>
	{
		switch (Port_ID)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	49 f0       	breq	.+18     	; 0x11a <DIO_SetPortDirection+0x1a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPortDirection+0x14>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	49 f0       	breq	.+18     	; 0x120 <DIO_SetPortDirection+0x20>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	51 f0       	breq	.+20     	; 0x126 <DIO_SetPortDirection+0x26>
 112:	08 95       	ret
		{
			case(PORTA):DDRA_Reg = 0xff;break;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bb       	out	0x1a, r24	; 26
 118:	08 95       	ret
			case(PORTB):DDRB_Reg = 0xff;break;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	08 95       	ret
			case(PORTC):DDRC_Reg = 0xff;break;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
			case(PORTD):DDRD_Reg = 0xff;break;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	81 bb       	out	0x11, r24	; 17
 12a:	08 95       	ret
		}
		
	}
	else if(Input==Direction)
 12c:	61 11       	cpse	r22, r1
 12e:	0f c0       	rjmp	.+30     	; 0x14e <DIO_SetPortDirection+0x4e>
	{
		switch (Port_ID)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <DIO_SetPortDirection+0x44>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_SetPortDirection+0x40>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	39 f0       	breq	.+14     	; 0x148 <DIO_SetPortDirection+0x48>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	39 f0       	breq	.+14     	; 0x14c <DIO_SetPortDirection+0x4c>
 13e:	08 95       	ret
		{
			case(PORTA):DDRA_Reg=0x00;break;
 140:	1a ba       	out	0x1a, r1	; 26
 142:	08 95       	ret
			case(PORTB):DDRB_Reg=0x00;break;
 144:	17 ba       	out	0x17, r1	; 23
 146:	08 95       	ret
			case(PORTC):DDRC_Reg=0x00;break;
 148:	14 ba       	out	0x14, r1	; 20
 14a:	08 95       	ret
			case(PORTD):DDRD_Reg=0x00;break;
 14c:	11 ba       	out	0x11, r1	; 17
 14e:	08 95       	ret

00000150 <__vector_1>:
	EXTI_CallBackPtr=CopyFuncPTR;
}
//this prototype to prevent compiler from optimization of this function
void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(EXTI_CallBackPtr!=NULL)
 172:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI_CallBackPtr>
 176:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI_CallBackPtr+0x1>
 17a:	30 97       	sbiw	r30, 0x00	; 0
 17c:	09 f0       	breq	.+2      	; 0x180 <__vector_1+0x30>
		EXTI_CallBackPtr();
 17e:	09 95       	icall
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_11>:



void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	if(Timer_CallBackPtr!=NULL)
 1c4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Timer_CallBackPtr>
 1c8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Timer_CallBackPtr+0x1>
 1cc:	30 97       	sbiw	r30, 0x00	; 0
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <__vector_11+0x30>
		Timer_CallBackPtr();
 1d0:	09 95       	icall
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <UART_Intialize>:
void UART_Intialize()
{
	//1)Clearing the register of baud rate //selected baud rate9600 

	uint16 BaudRate=12;
	UBRRL_REG=(uint8)BaudRate;
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	89 b9       	out	0x09, r24	; 9
	UBRRH_REG=(uint8)(BaudRate>>8);
 1f8:	10 bc       	out	0x20, r1	; 32
	 

	//2)ENABLE TRANSMIT AND RECIEVE 
	UCSRB_REG |= UART_ReceivingStatus;
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
	UCSRB_REG |= UART_TransmittingStatus;
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	88 60       	ori	r24, 0x08	; 8
 204:	8a b9       	out	0x0a, r24	; 10
	
	//3)set the format 8 data bit no parity and 1 stop bits
					//note(will set bit 7 of the next register to allow me to access UCSRC_REG not UBRRH_REG)
	SetBIT(UCSRC_REG,7);
 206:	80 b5       	in	r24, 0x20	; 32
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	80 bd       	out	0x20, r24	; 32
	UCSRC_REG |= UART_CharacterSize_selector_UCSZ ;
 20c:	80 b5       	in	r24, 0x20	; 32
 20e:	86 60       	ori	r24, 0x06	; 6
 210:	80 bd       	out	0x20, r24	; 32
	UCSRC_REG |= UART_Stop_Bits_number_selector;
 212:	80 b5       	in	r24, 0x20	; 32
 214:	80 bd       	out	0x20, r24	; 32
	UCSRC_REG |= UART_parity_selector;
 216:	80 b5       	in	r24, 0x20	; 32
 218:	80 bd       	out	0x20, r24	; 32
	//4)CHOOSING THE SPeed will make it normal not double
	UCSRA_REG |= UART_Speed_selector;	
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	08 95       	ret

00000222 <UART_Transmit>:
}
void UART_Transmit(uint8 Send_Byte)
{
	while(!GetBIT(UCSRA_REG,5));
 222:	5d 9b       	sbis	0x0b, 5	; 11
 224:	fe cf       	rjmp	.-4      	; 0x222 <UART_Transmit>
	UDR_REG =Send_Byte;	
 226:	8c b9       	out	0x0c, r24	; 12
 228:	08 95       	ret

0000022a <UART_Receive>:
}

uint8 UART_Receive()
{
	while(!GetBIT(UCSRA_REG,7));
 22a:	5f 9b       	sbis	0x0b, 7	; 11
 22c:	fe cf       	rjmp	.-4      	; 0x22a <UART_Receive>
	
	uint8 recieved=UDR_REG;
 22e:	8c b1       	in	r24, 0x0c	; 12
	return (recieved);
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
