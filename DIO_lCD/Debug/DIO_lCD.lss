
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ece  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e8  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000941  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b9  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8a:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ISR>:

#include "Timer0_overflow_interrupt_LAB.h"

void ISR()
{
	DIO_SetPinValue(PORTB,4,HIGH);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinValue>
  9c:	08 95       	ret

0000009e <Timer_Lab>:
	
}

void Timer_Lab()
{
	DIO_SetPortDirection(PORTB,Output);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 99 00 	call	0x132	; 0x132 <DIO_SetPortDirection>
	TIMER_SetCallback(ISR);
  a6:	89 e4       	ldi	r24, 0x49	; 73
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <TIMER_SetCallback>
	Global_Interrupt_Enable();
  ae:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Global_Interrupt_Enable>
	Timer_intialize();
  b2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Timer_intialize>
	uint8 data=0b11111111;
	DIO_SetPortDirection(PORTC,Output);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 99 00 	call	0x132	; 0x132 <DIO_SetPortDirection>
	while(1)
	{
		data=TCNT0_REG;
  be:	62 b7       	in	r22, 0x32	; 50
		DIO_SetPortValue(PORTC,data);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e7       	ldi	r18, 0x7F	; 127
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	9e e1       	ldi	r25, 0x1E	; 30
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <Timer_Lab+0x2e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Timer_Lab+0x38>
  d6:	00 00       	nop
  d8:	f2 cf       	rjmp	.-28     	; 0xbe <Timer_Lab+0x20>

000000da <main>:
{
	
	//ADC_LAB();
	//Sev_Seg(11,0.1);
	//ADC_interrupt_Lab();
	Timer_Lab();
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <Timer_Lab>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x4>

000000e0 <__vector_16>:

//THIS SENTENCE IS SPECIAL TO ADC_MAX_NUMBER_OF_STEPS	KE PROCESSEOR NOT TO OPTIMIZE THE CODE AND DELETE THIS FUCNTION
void __vector_16(void) __attribute__((signal , used));

void __vector_16(void)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	
	if(ADC_CallBackPtr!=NULL)
 102:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	30 97       	sbiw	r30, 0x00	; 0
 10c:	09 f0       	breq	.+2      	; 0x110 <__vector_16+0x30>
	{
		
		ADC_CallBackPtr();
 10e:	09 95       	icall
		
	}
		
	
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <DIO_SetPortDirection>:
		switch(Port_ID)
		{
				case(PORTA):SetBIT(DDRA_Reg,Pin_ID);break;
				case(PORTB):SetBIT(DDRB_Reg,Pin_ID);break;
				case(PORTC):SetBIT(DDRC_Reg,Pin_ID);break;
				case(PORTD):SetBIT(DDRD_Reg,Pin_ID);break;
 132:	61 30       	cpi	r22, 0x01	; 1
 134:	a1 f4       	brne	.+40     	; 0x15e <DIO_SetPortDirection+0x2c>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	49 f0       	breq	.+18     	; 0x14c <DIO_SetPortDirection+0x1a>
 13a:	28 f0       	brcs	.+10     	; 0x146 <DIO_SetPortDirection+0x14>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	49 f0       	breq	.+18     	; 0x152 <DIO_SetPortDirection+0x20>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	51 f0       	breq	.+20     	; 0x158 <DIO_SetPortDirection+0x26>
 144:	08 95       	ret
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8a bb       	out	0x1a, r24	; 26
 14a:	08 95       	ret
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	87 bb       	out	0x17, r24	; 23
 150:	08 95       	ret
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret
 15e:	61 11       	cpse	r22, r1
 160:	0f c0       	rjmp	.+30     	; 0x180 <DIO_SetPortDirection+0x4e>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	41 f0       	breq	.+16     	; 0x176 <DIO_SetPortDirection+0x44>
 166:	28 f0       	brcs	.+10     	; 0x172 <DIO_SetPortDirection+0x40>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_SetPortDirection+0x48>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	39 f0       	breq	.+14     	; 0x17e <DIO_SetPortDirection+0x4c>
 170:	08 95       	ret
 172:	1a ba       	out	0x1a, r1	; 26
 174:	08 95       	ret
 176:	17 ba       	out	0x17, r1	; 23
 178:	08 95       	ret
 17a:	14 ba       	out	0x14, r1	; 20
 17c:	08 95       	ret
 17e:	11 ba       	out	0x11, r1	; 17
 180:	08 95       	ret

00000182 <DIO_SetPortValue>:
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	41 f0       	breq	.+16     	; 0x196 <DIO_SetPortValue+0x14>
 186:	28 f0       	brcs	.+10     	; 0x192 <DIO_SetPortValue+0x10>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	39 f0       	breq	.+14     	; 0x19a <DIO_SetPortValue+0x18>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	39 f0       	breq	.+14     	; 0x19e <DIO_SetPortValue+0x1c>
 190:	08 95       	ret
 192:	6b bb       	out	0x1b, r22	; 27
 194:	08 95       	ret
 196:	68 bb       	out	0x18, r22	; 24
 198:	08 95       	ret
 19a:	65 bb       	out	0x15, r22	; 21
 19c:	08 95       	ret
 19e:	62 bb       	out	0x12, r22	; 18
 1a0:	08 95       	ret

000001a2 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID, STD_Value Value)
{
	if(Value==HIGH)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	a1 f5       	brne	.+104    	; 0x20e <DIO_SetPinValue+0x6c>
	{
		switch(Port_ID)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	89 f0       	breq	.+34     	; 0x1cc <DIO_SetPinValue+0x2a>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_SetPinValue+0x14>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	c9 f0       	breq	.+50     	; 0x1e2 <DIO_SetPinValue+0x40>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	11 f1       	breq	.+68     	; 0x1f8 <DIO_SetPinValue+0x56>
 1b4:	08 95       	ret
		{
			case(PORTA): SetBIT(PORTA_Reg,Pin_ID);break;
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinValue+0x20>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinValue+0x1c>
 1c6:	82 2b       	or	r24, r18
 1c8:	8b bb       	out	0x1b, r24	; 27
 1ca:	08 95       	ret
			case(PORTB): SetBIT(PORTB_Reg,Pin_ID);break;
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinValue+0x36>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinValue+0x32>
 1dc:	82 2b       	or	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
			case(PORTC): SetBIT(PORTC_Reg,Pin_ID);break;
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPinValue+0x4c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPinValue+0x48>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
			case(PORTD): SetBIT(PORTD_Reg,Pin_ID);break;
 1f8:	22 b3       	in	r18, 0x12	; 18
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPinValue+0x62>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPinValue+0x5e>
 208:	82 2b       	or	r24, r18
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	08 95       	ret
			
		}
		
	}
	else if(Value==LOW)
 20e:	41 11       	cpse	r20, r1
 210:	37 c0       	rjmp	.+110    	; 0x280 <DIO_SetPinValue+0xde>
	{
			switch(Port_ID)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	91 f0       	breq	.+36     	; 0x23a <DIO_SetPinValue+0x98>
 216:	28 f0       	brcs	.+10     	; 0x222 <DIO_SetPinValue+0x80>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	d9 f0       	breq	.+54     	; 0x252 <DIO_SetPinValue+0xb0>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	29 f1       	breq	.+74     	; 0x26a <DIO_SetPinValue+0xc8>
 220:	08 95       	ret
			{
				case(PORTA): ClearBIT(PORTA_Reg,Pin_ID);break;
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinValue+0x8c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinValue+0x88>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	8b bb       	out	0x1b, r24	; 27
 238:	08 95       	ret
				case(PORTB): ClearBIT(PORTB_Reg,Pin_ID);break;
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinValue+0xa4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinValue+0xa0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
 250:	08 95       	ret
				case(PORTC): ClearBIT(PORTC_Reg,Pin_ID);break;
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinValue+0xbc>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinValue+0xb8>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	85 bb       	out	0x15, r24	; 21
 268:	08 95       	ret
				case(PORTD): ClearBIT(PORTD_Reg,Pin_ID);break;
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinValue+0xd4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinValue+0xd0>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	82 bb       	out	0x12, r24	; 18
 280:	08 95       	ret

00000282 <__vector_1>:
	CallBackPtr=CopyFuncPTR;
}
//this prototype to prevent compiler from optimization of this function
void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	if(CallBackPtr!=NULL)
 2a4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <CallBackPtr>
 2a8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <CallBackPtr+0x1>
 2ac:	30 97       	sbiw	r30, 0x00	; 0
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <__vector_1+0x30>
		CallBackPtr();
 2b0:	09 95       	icall
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <Global_Interrupt_Enable>:


static void (*CallBackPtr)(void);
void Global_Interrupt_Enable()
{
	SetBIT(SREG_REG,GIE_ENABLE_BIT);
 2d4:	8f b7       	in	r24, 0x3f	; 63
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	8f bf       	out	0x3f, r24	; 63
 2da:	08 95       	ret

000002dc <Timer_intialize>:
1)SELECT CLOCK SOURCE
2)SELECT MODE OF OPERATION
3)ENABLE OR DISABLE OF INTERRUPT
*/
//1)
	TCCR0_REG&&TIMER_CLOCK_SELECT_clr_msk;
 2dc:	83 b7       	in	r24, 0x33	; 51
	TCCR0_REG||TIMER_CLK_SELECTOR;
 2de:	83 b7       	in	r24, 0x33	; 51
//2)
	TCCR0_REG&&TIMER_WAVE_FORM_MODE_clr_msk;
 2e0:	83 b7       	in	r24, 0x33	; 51
	TCCR0_REG||TIMER_WAVEFORM_SELECTOR;
 2e2:	83 b7       	in	r24, 0x33	; 51
//3)
	TIMSK_REG&&(11111100);
 2e4:	89 b7       	in	r24, 0x39	; 57
	TIMSK_REG||TIMER_OVERFLOW_INTERRUPT_STATUS	;
 2e6:	89 b7       	in	r24, 0x39	; 57
	TIMSK_REG||TIMER_CompareMatch_INTERRUPT_STATUS;
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	08 95       	ret

000002ec <TIMER_SetCallback>:
	
}

void TIMER_SetCallback(void(*CopyFuncPTR)(void))
{
	Timer_CallBackPtr=CopyFuncPTR;
 2ec:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Timer_CallBackPtr+0x1>
 2f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Timer_CallBackPtr>
 2f4:	08 95       	ret

000002f6 <__vector_11>:
}
void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	if(Timer_CallBackPtr!=NULL)
 318:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Timer_CallBackPtr>
 31c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Timer_CallBackPtr+0x1>
 320:	30 97       	sbiw	r30, 0x00	; 0
 322:	09 f0       	breq	.+2      	; 0x326 <__vector_11+0x30>
		Timer_CallBackPtr();
 324:	09 95       	icall
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
