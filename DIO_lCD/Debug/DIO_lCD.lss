
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  000010fe  00001192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001a0  008001a0  000012d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030eb  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3b  00000000  00000000  00004663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000174d  00000000  00000000  0000549e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00006bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000993  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015b8  00000000  00000000  00007a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000903f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 06 	call	0xd68	; 0xd68 <main>
      8a:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetPassword>:
	}
	 
	 
}
void SetPassword()
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
	LCD_WriteString("Set ADMIN Pass",0,0);
      98:	40 e0       	ldi	r20, 0x00	; 0
      9a:	60 e0       	ldi	r22, 0x00	; 0
      9c:	80 e6       	ldi	r24, 0x60	; 96
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
	LCD_GoToPos(1,0);
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_GoToPos>
	//reading the password from the user
	uint8 keypad_reading=NO_KEY_PRESSED;
	for (int i=0;i<4;i++)
      ac:	00 e0       	ldi	r16, 0x00	; 0
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	0f c0       	rjmp	.+30     	; 0xd0 <SetPassword+0x3e>
	{
		while(1)
		{
			
			keypad_reading  = Keypad_read(ONE_PRESS);
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
      b8:	c8 2f       	mov	r28, r24
			if (keypad_reading != NO_KEY_PRESSED)
      ba:	88 23       	and	r24, r24
      bc:	d1 f3       	breq	.-12     	; 0xb2 <SetPassword+0x20>
			{
				EEPROM_Write(i,keypad_reading);
      be:	68 2f       	mov	r22, r24
      c0:	c8 01       	movw	r24, r16
      c2:	0e 94 18 08 	call	0x1030	; 0x1030 <EEPROM_Write>
				LCD_WriteData(keypad_reading);
      c6:	8c 2f       	mov	r24, r28
      c8:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
{
	LCD_WriteString("Set ADMIN Pass",0,0);
	LCD_GoToPos(1,0);
	//reading the password from the user
	uint8 keypad_reading=NO_KEY_PRESSED;
	for (int i=0;i<4;i++)
      cc:	0f 5f       	subi	r16, 0xFF	; 255
      ce:	1f 4f       	sbci	r17, 0xFF	; 255
      d0:	04 30       	cpi	r16, 0x04	; 4
      d2:	11 05       	cpc	r17, r1
      d4:	74 f3       	brlt	.-36     	; 0xb2 <SetPassword+0x20>
				break;
			}
		}
	}
	
	LCD_WriteCmd(0x01);
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	LCD_WriteString("password saved",0,0);
      dc:	40 e0       	ldi	r20, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	8f e6       	ldi	r24, 0x6F	; 111
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
	EEPROM_Write(4,'S');
      e8:	63 e5       	ldi	r22, 0x53	; 83
      ea:	84 e0       	ldi	r24, 0x04	; 4
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 18 08 	call	0x1030	; 0x1030 <EEPROM_Write>
}
      f2:	cf 91       	pop	r28
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	08 95       	ret

000000fa <EnterPassword>:

int EnterPassword()
{
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
	 int pass_status= 1;
	 LCD_WriteString("enter your pass",0,0);
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	8e e7       	ldi	r24, 0x7E	; 126
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
	 LCD_GoToPos(1,0);
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_GoToPos>
	 uint8 keypad_reading=NO_KEY_PRESSED;
	 for (int j=0;j<5;j++)
     11c:	c1 2c       	mov	r12, r1
     11e:	d1 2c       	mov	r13, r1
     120:	54 c0       	rjmp	.+168    	; 0x1ca <EnterPassword+0xd0>
		 for (int i=0;i<4;i++)
		 {
			 while(1)
			 {
				 
				 keypad_reading  = Keypad_read(ONE_PRESS);
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     128:	c8 2f       	mov	r28, r24
				 if (keypad_reading != NO_KEY_PRESSED)
     12a:	88 23       	and	r24, r24
     12c:	d1 f3       	breq	.-12     	; 0x122 <EnterPassword+0x28>
				 {
					 LCD_WriteData(keypad_reading);
     12e:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
					 if(keypad_reading!=EEPROM_Read(i))
     132:	c8 01       	movw	r24, r16
     134:	0e 94 23 08 	call	0x1046	; 0x1046 <EEPROM_Read>
     138:	c8 17       	cp	r28, r24
     13a:	11 f0       	breq	.+4      	; 0x140 <EnterPassword+0x46>
					 pass_status=0;
     13c:	e1 2c       	mov	r14, r1
     13e:	f1 2c       	mov	r15, r1
	 uint8 keypad_reading=NO_KEY_PRESSED;
	 for (int j=0;j<5;j++)
	 {
		 pass_status=1;
		 
		 for (int i=0;i<4;i++)
     140:	0f 5f       	subi	r16, 0xFF	; 255
     142:	1f 4f       	sbci	r17, 0xFF	; 255
     144:	05 c0       	rjmp	.+10     	; 0x150 <EnterPassword+0x56>
     146:	00 e0       	ldi	r16, 0x00	; 0
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	ee 24       	eor	r14, r14
     14c:	e3 94       	inc	r14
     14e:	f1 2c       	mov	r15, r1
     150:	04 30       	cpi	r16, 0x04	; 4
     152:	11 05       	cpc	r17, r1
     154:	34 f3       	brlt	.-52     	; 0x122 <EnterPassword+0x28>
					 pass_status=0;
					 break;
				 }
			 }
		 }
		 if(pass_status==1)
     156:	ea 94       	dec	r14
     158:	ef 28       	or	r14, r15
     15a:	61 f4       	brne	.+24     	; 0x174 <EnterPassword+0x7a>
		 {
			 LCD_WriteCmd(0x01);
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
			 LCD_WriteString("Right",0,0);
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8e e8       	ldi	r24, 0x8E	; 142
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			 return(Right);
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	30 c0       	rjmp	.+96     	; 0x1d4 <EnterPassword+0xda>
		 }
		 else
		 {
			 LCD_WriteCmd(0x01);
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
			 LCD_WriteString("Wrong",0,0);
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     186:	8f e3       	ldi	r24, 0x3F	; 63
     188:	9d e0       	ldi	r25, 0x0D	; 13
     18a:	23 e0       	ldi	r18, 0x03	; 3
     18c:	81 50       	subi	r24, 0x01	; 1
     18e:	90 40       	sbci	r25, 0x00	; 0
     190:	20 40       	sbci	r18, 0x00	; 0
     192:	e1 f7       	brne	.-8      	; 0x18c <EnterPassword+0x92>
     194:	00 c0       	rjmp	.+0      	; 0x196 <EnterPassword+0x9c>
     196:	00 00       	nop
			 _delay_ms(1000);
			  LCD_WriteString("enter again",0,0);
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	8a e9       	ldi	r24, 0x9A	; 154
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			 
			 if(j==4)
     1a4:	84 e0       	ldi	r24, 0x04	; 4
     1a6:	c8 16       	cp	r12, r24
     1a8:	d1 04       	cpc	r13, r1
     1aa:	61 f4       	brne	.+24     	; 0x1c4 <EnterPassword+0xca>
			 {
				 LCD_WriteCmd(0x01);
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
				 LCD_WriteString("Block",0,0);
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	86 ea       	ldi	r24, 0xA6	; 166
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				 return(wrong);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <EnterPassword+0xda>
{
	 int pass_status= 1;
	 LCD_WriteString("enter your pass",0,0);
	 LCD_GoToPos(1,0);
	 uint8 keypad_reading=NO_KEY_PRESSED;
	 for (int j=0;j<5;j++)
     1c4:	9f ef       	ldi	r25, 0xFF	; 255
     1c6:	c9 1a       	sub	r12, r25
     1c8:	d9 0a       	sbc	r13, r25
     1ca:	25 e0       	ldi	r18, 0x05	; 5
     1cc:	c2 16       	cp	r12, r18
     1ce:	d1 04       	cpc	r13, r1
     1d0:	0c f4       	brge	.+2      	; 0x1d4 <EnterPassword+0xda>
     1d2:	b9 cf       	rjmp	.-142    	; 0x146 <EnterPassword+0x4c>
			 
		 }
		 
	 }
	
}
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	df 90       	pop	r13
     1e0:	cf 90       	pop	r12
     1e2:	08 95       	ret

000001e4 <SelectMode>:


int SelectMode()
{
     1e4:	cf 93       	push	r28
	 LCD_WriteCmd(0x01);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	 LCD_WriteString("SelectMode",0,0);
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	8c ea       	ldi	r24, 0xAC	; 172
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
     1f8:	2f e9       	ldi	r18, 0x9F	; 159
     1fa:	86 e8       	ldi	r24, 0x86	; 134
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <SelectMode+0x1a>
     206:	00 c0       	rjmp	.+0      	; 0x208 <SelectMode+0x24>
     208:	00 00       	nop
	 _delay_ms(500);
	 LCD_WriteCmd(0x01);
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	 LCD_WriteString("1)ADMIN  2)GUEST",0,0);
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	87 eb       	ldi	r24, 0xB7	; 183
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
	 uint8 keypad_reading=NO_KEY_PRESSED;
	 while(1)
	 {
		 
		 keypad_reading  = Keypad_read(ONE_PRESS);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     222:	c8 2f       	mov	r28, r24
		 if (keypad_reading != NO_KEY_PRESSED)
     224:	88 23       	and	r24, r24
     226:	d1 f3       	breq	.-12     	; 0x21c <SelectMode+0x38>
		 {
			 LCD_WriteData(keypad_reading);
     228:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
			 
			 return (keypad_reading) ;
			 
		 }
	 }
}
     22c:	8c 2f       	mov	r24, r28
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <Guest_Mode>:

void Guest_Mode()
{
     234:	cf 93       	push	r28
		DIO_SetPinValue(PORTD,0,LOW);
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTD,1,HIGH);
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTD,2,LOW);
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	62 e0       	ldi	r22, 0x02	; 2
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		
		LCD_WriteCmd(0x01);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
		LCD_WriteString("1)ROOM1 2)ROOM2",0,0);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	88 ec       	ldi	r24, 0xC8	; 200
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
		LCD_WriteString("3)ROOM34)ROOM4",1,0);
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	88 ed       	ldi	r24, 0xD8	; 216
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
		uint8 keypad_reading=NO_KEY_PRESSED;
		while(1)
		{
			
			keypad_reading  = Keypad_read(ONE_PRESS);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     278:	c8 2f       	mov	r28, r24
			if (keypad_reading != NO_KEY_PRESSED)
     27a:	88 23       	and	r24, r24
     27c:	d1 f3       	breq	.-12     	; 0x272 <Guest_Mode+0x3e>
			{
				LCD_WriteData(keypad_reading);
     27e:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
				break;
			}

		}
		switch(keypad_reading)
     282:	c2 33       	cpi	r28, 0x32	; 50
     284:	59 f1       	breq	.+86     	; 0x2dc <Guest_Mode+0xa8>
     286:	18 f4       	brcc	.+6      	; 0x28e <Guest_Mode+0x5a>
     288:	c1 33       	cpi	r28, 0x31	; 49
     28a:	41 f0       	breq	.+16     	; 0x29c <Guest_Mode+0x68>
     28c:	81 c0       	rjmp	.+258    	; 0x390 <Guest_Mode+0x15c>
     28e:	c3 33       	cpi	r28, 0x33	; 51
     290:	09 f4       	brne	.+2      	; 0x294 <Guest_Mode+0x60>
     292:	43 c0       	rjmp	.+134    	; 0x31a <Guest_Mode+0xe6>
     294:	c4 33       	cpi	r28, 0x34	; 52
     296:	09 f4       	brne	.+2      	; 0x29a <Guest_Mode+0x66>
     298:	5e c0       	rjmp	.+188    	; 0x356 <Guest_Mode+0x122>
     29a:	7a c0       	rjmp	.+244    	; 0x390 <Guest_Mode+0x15c>
			{
				case '1': 
					LCD_WriteCmd(0x01);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
					LCD_WriteString("ROOM1 :1)ON",0,0);
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	87 ee       	ldi	r24, 0xE7	; 231
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					LCD_WriteString("2)OFF3)RET",1,0);
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	83 ef       	ldi	r24, 0xF3	; 243
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					while(1)
					{
						
						keypad_reading  = Keypad_read(ONE_PRESS);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     2c0:	c8 2f       	mov	r28, r24
						if (keypad_reading != NO_KEY_PRESSED)
     2c2:	88 23       	and	r24, r24
     2c4:	d1 f3       	breq	.-12     	; 0x2ba <Guest_Mode+0x86>
						{
							LCD_WriteData(keypad_reading);
     2c6:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
							break;
						}

					}	
					
						if(keypad_reading=='1')
     2ca:	c1 33       	cpi	r28, 0x31	; 49
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <Guest_Mode+0x9c>
     2ce:	60 c0       	rjmp	.+192    	; 0x390 <Guest_Mode+0x15c>
						{
							//SEND ON
						}	
						else if (keypad_reading=='2')	
     2d0:	c2 33       	cpi	r28, 0x32	; 50
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <Guest_Mode+0xa2>
     2d4:	5d c0       	rjmp	.+186    	; 0x390 <Guest_Mode+0x15c>
						{
							//send off
						}	
						else
						{
							Guest_Mode();
     2d6:	0e 94 1a 01 	call	0x234	; 0x234 <Guest_Mode>
     2da:	5a c0       	rjmp	.+180    	; 0x390 <Guest_Mode+0x15c>
						}	
					break;
					case '2':
					LCD_WriteCmd(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
					LCD_WriteString("ROOM2 :1)ON",0,0);
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8e ef       	ldi	r24, 0xFE	; 254
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					LCD_WriteString("2)OFF3)RET",1,0);
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	83 ef       	ldi	r24, 0xF3	; 243
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					while(1)
					{
						
						keypad_reading  = Keypad_read(ONE_PRESS);
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     300:	c8 2f       	mov	r28, r24
						if (keypad_reading != NO_KEY_PRESSED)
     302:	88 23       	and	r24, r24
     304:	d1 f3       	breq	.-12     	; 0x2fa <Guest_Mode+0xc6>
						{
							LCD_WriteData(keypad_reading);
     306:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
							break;
						}

					}
					
					if(keypad_reading=='1')
     30a:	c1 33       	cpi	r28, 0x31	; 49
     30c:	09 f4       	brne	.+2      	; 0x310 <Guest_Mode+0xdc>
     30e:	40 c0       	rjmp	.+128    	; 0x390 <Guest_Mode+0x15c>
					{
						//SEND ON to the room2
					}
					else if (keypad_reading=='2')
     310:	c2 33       	cpi	r28, 0x32	; 50
     312:	f1 f1       	breq	.+124    	; 0x390 <Guest_Mode+0x15c>
					{
						//send off to the room2
					}
					else
					{
						Guest_Mode();
     314:	0e 94 1a 01 	call	0x234	; 0x234 <Guest_Mode>
     318:	3b c0       	rjmp	.+118    	; 0x390 <Guest_Mode+0x15c>
					}
					break;
					
					case '3':
					LCD_WriteCmd(0x01);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
					LCD_WriteString("ROOM3 :1)ON",0,0);
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	8a e0       	ldi	r24, 0x0A	; 10
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					LCD_WriteString("2)OFF3)RET",1,0);
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	83 ef       	ldi	r24, 0xF3	; 243
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					while(1)
					{
						
						keypad_reading  = Keypad_read(ONE_PRESS);
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     33e:	c8 2f       	mov	r28, r24
						if (keypad_reading != NO_KEY_PRESSED)
     340:	88 23       	and	r24, r24
     342:	d1 f3       	breq	.-12     	; 0x338 <Guest_Mode+0x104>
						{
							LCD_WriteData(keypad_reading);
     344:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
							break;
						}

					}
					
					if(keypad_reading=='1')
     348:	c1 33       	cpi	r28, 0x31	; 49
     34a:	11 f1       	breq	.+68     	; 0x390 <Guest_Mode+0x15c>
					{
						//SEND ON to the room 3
					}
					else if (keypad_reading=='2')
     34c:	c2 33       	cpi	r28, 0x32	; 50
     34e:	01 f1       	breq	.+64     	; 0x390 <Guest_Mode+0x15c>
					{
						//send off to the room 3
					}
					else
					{
						Guest_Mode();
     350:	0e 94 1a 01 	call	0x234	; 0x234 <Guest_Mode>
     354:	1d c0       	rjmp	.+58     	; 0x390 <Guest_Mode+0x15c>
					}
					break;
					
					
					case '4':
					LCD_WriteCmd(0x01);
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
					LCD_WriteString("ROOM4 :1)ON",0,0);
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	86 e1       	ldi	r24, 0x16	; 22
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					LCD_WriteString("2)OFF3)RET",1,0);
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	83 ef       	ldi	r24, 0xF3	; 243
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					while(1)
					{
						
						keypad_reading  = Keypad_read(ONE_PRESS);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     37a:	c8 2f       	mov	r28, r24
						if (keypad_reading != NO_KEY_PRESSED)
     37c:	88 23       	and	r24, r24
     37e:	d1 f3       	breq	.-12     	; 0x374 <Guest_Mode+0x140>
						{
							LCD_WriteData(keypad_reading);
     380:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
							break;
						}

					}
					
					if(keypad_reading=='1')
     384:	c1 33       	cpi	r28, 0x31	; 49
     386:	21 f0       	breq	.+8      	; 0x390 <Guest_Mode+0x15c>
					{
						//SEND ON to the room 4
					}
					else if (keypad_reading=='2')
     388:	c2 33       	cpi	r28, 0x32	; 50
     38a:	11 f0       	breq	.+4      	; 0x390 <Guest_Mode+0x15c>
					{
						//send off to the room 4
					}
					else
					{
						Guest_Mode();
     38c:	0e 94 1a 01 	call	0x234	; 0x234 <Guest_Mode>
					break;
			}
		

		
}
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <ADMIN_Mode>:

void ADMIN_Mode()
{
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
		DIO_SetPinValue(PORTD,0,HIGH);
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTD,1,LOW);
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTD,2,LOW);
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		LCD_WriteCmd(0x01);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
			LCD_WriteString("1)ROOM1 2)ROOM2",0,0);
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	88 ec       	ldi	r24, 0xC8	; 200
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			LCD_WriteString("3)ROOM3 4)more",1,0);
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	82 e2       	ldi	r24, 0x22	; 34
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
		uint8 keypad_reading=NO_KEY_PRESSED;
		while(1)
		{
			
			keypad_reading  = Keypad_read(ONE_PRESS);
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     3da:	c8 2f       	mov	r28, r24
			if (keypad_reading != NO_KEY_PRESSED)
     3dc:	88 23       	and	r24, r24
     3de:	d1 f3       	breq	.-12     	; 0x3d4 <ADMIN_Mode+0x40>
			{
				LCD_WriteData(keypad_reading);
     3e0:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
				break;
			}

		}
		switch(keypad_reading)
     3e4:	c2 33       	cpi	r28, 0x32	; 50
     3e6:	79 f1       	breq	.+94     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     3e8:	18 f4       	brcc	.+6      	; 0x3f0 <ADMIN_Mode+0x5c>
     3ea:	c1 33       	cpi	r28, 0x31	; 49
     3ec:	41 f0       	breq	.+16     	; 0x3fe <ADMIN_Mode+0x6a>
     3ee:	49 c1       	rjmp	.+658    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
     3f0:	c3 33       	cpi	r28, 0x33	; 51
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <ADMIN_Mode+0x62>
     3f4:	4c c0       	rjmp	.+152    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     3f6:	c4 33       	cpi	r28, 0x34	; 52
     3f8:	09 f4       	brne	.+2      	; 0x3fc <ADMIN_Mode+0x68>
     3fa:	6d c0       	rjmp	.+218    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     3fc:	42 c1       	rjmp	.+644    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
		{
			case '1':
			LCD_WriteCmd(0x01);
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
			LCD_WriteString("ROOM1 :1)ON",0,0);
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	87 ee       	ldi	r24, 0xE7	; 231
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			LCD_WriteString("2)OFF3)RET",1,0);
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	83 ef       	ldi	r24, 0xF3	; 243
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			while(1)
			{
				
				keypad_reading  = Keypad_read(ONE_PRESS);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     422:	c8 2f       	mov	r28, r24
				if (keypad_reading != NO_KEY_PRESSED)
     424:	88 23       	and	r24, r24
     426:	d1 f3       	breq	.-12     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				{
					LCD_WriteData(keypad_reading);
     428:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
					break;
				}

			}
			
			if(keypad_reading=='1')
     42c:	c1 33       	cpi	r28, 0x31	; 49
     42e:	19 f4       	brne	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			{
				//SEND ON
				ADMIN_Mode();
     430:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     434:	26 c1       	rjmp	.+588    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			else if (keypad_reading=='2')
     436:	c2 33       	cpi	r28, 0x32	; 50
     438:	19 f4       	brne	.+6      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			{
				//send off
				ADMIN_Mode();
     43a:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     43e:	21 c1       	rjmp	.+578    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			else
			{
				ADMIN_Mode();
     440:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     444:	1e c1       	rjmp	.+572    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			break;
			case '2':
			LCD_WriteCmd(0x01);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
			LCD_WriteString("ROOM2 :1)ON",0,0);
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	8e ef       	ldi	r24, 0xFE	; 254
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			LCD_WriteString("2)OFF3)RET",1,0);
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	83 ef       	ldi	r24, 0xF3	; 243
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			while(1)
			{
				
				keypad_reading  = Keypad_read(ONE_PRESS);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     46a:	c8 2f       	mov	r28, r24
				if (keypad_reading != NO_KEY_PRESSED)
     46c:	88 23       	and	r24, r24
     46e:	d1 f3       	breq	.-12     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				{
					LCD_WriteData(keypad_reading);
     470:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
					break;
				}

			}
			
			if(keypad_reading=='1')
     474:	c1 33       	cpi	r28, 0x31	; 49
     476:	19 f4       	brne	.+6      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			{
				//SEND ON to the room2
				ADMIN_Mode();
     478:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     47c:	02 c1       	rjmp	.+516    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			else if (keypad_reading=='2')
     47e:	c2 33       	cpi	r28, 0x32	; 50
     480:	19 f4       	brne	.+6      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			{
				//send off to the room2
				ADMIN_Mode();
     482:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     486:	fd c0       	rjmp	.+506    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			else
			{
				ADMIN_Mode();
     488:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     48c:	fa c0       	rjmp	.+500    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			break;
			
			case '3':
			LCD_WriteCmd(0x01);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
			LCD_WriteString("ROOM3 :1)ON",0,0);
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	8a e0       	ldi	r24, 0x0A	; 10
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			LCD_WriteString("2)OFF3)RET",1,0);
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	83 ef       	ldi	r24, 0xF3	; 243
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
			while(1)
			{
				
				keypad_reading  = Keypad_read(ONE_PRESS);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     4b2:	c8 2f       	mov	r28, r24
				if (keypad_reading != NO_KEY_PRESSED)
     4b4:	88 23       	and	r24, r24
     4b6:	d1 f3       	breq	.-12     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
				{
					LCD_WriteData(keypad_reading);
     4b8:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
					break;
				}

			}
			
			if(keypad_reading=='1')
     4bc:	c1 33       	cpi	r28, 0x31	; 49
     4be:	19 f4       	brne	.+6      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
			{
				//SEND ON to the room 3
				ADMIN_Mode();
     4c0:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     4c4:	de c0       	rjmp	.+444    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			else if (keypad_reading=='2')
     4c6:	c2 33       	cpi	r28, 0x32	; 50
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			{
				//send off to the room 3
				ADMIN_Mode();
     4ca:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     4ce:	d9 c0       	rjmp	.+434    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			else
			{
				ADMIN_Mode();
     4d0:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     4d4:	d6 c0       	rjmp	.+428    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			}
			break;
			
			case '4':
			LCD_WriteCmd(0x01);
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
		    LCD_WriteString("1)ROOM4 2)TV ",0,0);
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	81 e3       	ldi	r24, 0x31	; 49
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
		    LCD_WriteString("3)COND 4)RET",1,0);
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	8f e3       	ldi	r24, 0x3F	; 63
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				while(1)
				{
					
					keypad_reading  = Keypad_read(ONE_PRESS);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     4fa:	c8 2f       	mov	r28, r24
					if (keypad_reading != NO_KEY_PRESSED)
     4fc:	88 23       	and	r24, r24
     4fe:	d1 f3       	breq	.-12     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
					{
						LCD_WriteData(keypad_reading);
     500:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
						break;
					}

				}
			switch(keypad_reading)//MORE
     504:	c2 33       	cpi	r28, 0x32	; 50
     506:	79 f1       	breq	.+94     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
     508:	18 f4       	brcc	.+6      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     50a:	c1 33       	cpi	r28, 0x31	; 49
     50c:	41 f0       	breq	.+16     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     50e:	b9 c0       	rjmp	.+370    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
     510:	c3 33       	cpi	r28, 0x33	; 51
     512:	09 f4       	brne	.+2      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     514:	4c c0       	rjmp	.+152    	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     516:	c4 33       	cpi	r28, 0x34	; 52
     518:	09 f4       	brne	.+2      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     51a:	b1 c0       	rjmp	.+354    	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
     51c:	b2 c0       	rjmp	.+356    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			{
				case '1' :
				LCD_WriteCmd(0x01);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
				LCD_WriteString("ROOM4 :1)ON",0,0);
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	86 e1       	ldi	r24, 0x16	; 22
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				LCD_WriteString("2)OFF 3)RET",1,0);
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	8c e4       	ldi	r24, 0x4C	; 76
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				while(1)
				{
					
					keypad_reading  = Keypad_read(ONE_PRESS);
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     542:	c8 2f       	mov	r28, r24
					if (keypad_reading != NO_KEY_PRESSED)
     544:	88 23       	and	r24, r24
     546:	d1 f3       	breq	.-12     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
					{
						LCD_WriteData(keypad_reading);
     548:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
						break;
					}

				}
				
				if(keypad_reading=='1')
     54c:	c1 33       	cpi	r28, 0x31	; 49
     54e:	19 f4       	brne	.+6      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
				{
					//SEND ON to the room 4
					ADMIN_Mode();
     550:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     554:	96 c0       	rjmp	.+300    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
				}
				else if (keypad_reading=='2')
     556:	c2 33       	cpi	r28, 0x32	; 50
     558:	19 f4       	brne	.+6      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
				{
					//send off to the room 4
					ADMIN_Mode();
     55a:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     55e:	91 c0       	rjmp	.+290    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
				}
				else
				{
					ADMIN_Mode();
     560:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     564:	8e c0       	rjmp	.+284    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
				}
				break;
				
				
				case '2':
				LCD_WriteCmd(0x01);
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
				LCD_WriteString("TV :1)ON",0,0);
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	88 e5       	ldi	r24, 0x58	; 88
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				LCD_WriteString("2)OFF 3)RET",1,0);
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	8c e4       	ldi	r24, 0x4C	; 76
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				while(1)
				{
					
					keypad_reading  = Keypad_read(ONE_PRESS);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     58a:	c8 2f       	mov	r28, r24
					if (keypad_reading != NO_KEY_PRESSED)
     58c:	88 23       	and	r24, r24
     58e:	d1 f3       	breq	.-12     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
					{
						LCD_WriteData(keypad_reading);
     590:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
						break;
					}

				}
				
				if(keypad_reading=='1')
     594:	c1 33       	cpi	r28, 0x31	; 49
     596:	19 f4       	brne	.+6      	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
				{
					//SEND ON to the TV
					ADMIN_Mode();
     598:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     59c:	72 c0       	rjmp	.+228    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
				}
				else if (keypad_reading=='2')
     59e:	c2 33       	cpi	r28, 0x32	; 50
     5a0:	19 f4       	brne	.+6      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
				{
					//send off to the TV
					ADMIN_Mode();
     5a2:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     5a6:	6d c0       	rjmp	.+218    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
				}
				else
				{
					ADMIN_Mode();
     5a8:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     5ac:	6a c0       	rjmp	.+212    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
				}
				break;
				case '3' :
				LCD_WriteCmd(0x01);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
				LCD_WriteString("1)SET TEMP ",0,0);
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	81 e6       	ldi	r24, 0x61	; 97
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				LCD_WriteString("2)CONTROL3)RET",1,0);
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	8d e6       	ldi	r24, 0x6D	; 109
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
				while(1)
				{
					
					keypad_reading  = Keypad_read(ONE_PRESS);
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     5d2:	c8 2f       	mov	r28, r24
					if (keypad_reading != NO_KEY_PRESSED)
     5d4:	88 23       	and	r24, r24
     5d6:	d1 f3       	breq	.-12     	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
					{
						LCD_WriteData(keypad_reading);
     5d8:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
						break;
					}

				}
				switch(keypad_reading)
     5dc:	c2 33       	cpi	r28, 0x32	; 50
     5de:	79 f1       	breq	.+94     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
     5e0:	c3 33       	cpi	r28, 0x33	; 51
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5e4:	4a c0       	rjmp	.+148    	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
     5e6:	c1 33       	cpi	r28, 0x31	; 49
     5e8:	09 f0       	breq	.+2      	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
     5ea:	49 c0       	rjmp	.+146    	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
				{
					
					case '1' :
					LCD_WriteCmd(0x01);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
					LCD_WriteString("SET TEMP :",0,0);
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	8c e7       	ldi	r24, 0x7C	; 124
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					for(int i=0;i<2;i++)
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	19 c0       	rjmp	.+50     	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
					{
						while(1)
						{
							
							keypad_reading  = Keypad_read(ONE_PRESS);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
							if (keypad_reading != NO_KEY_PRESSED)
     60a:	88 23       	and	r24, r24
     60c:	d9 f3       	breq	.-10     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
							{
								LCD_WriteData(keypad_reading);
     60e:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
								break;
							}
							

						}
						LCD_GoToPos(11-i,0);
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	8b e0       	ldi	r24, 0x0B	; 11
     616:	8c 1b       	sub	r24, r28
     618:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_GoToPos>
						LCD_WriteData(keypad_reading);
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
     622:	8f e9       	ldi	r24, 0x9F	; 159
     624:	96 e8       	ldi	r25, 0x86	; 134
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	81 50       	subi	r24, 0x01	; 1
     62a:	90 40       	sbci	r25, 0x00	; 0
     62c:	20 40       	sbci	r18, 0x00	; 0
     62e:	e1 f7       	brne	.-8      	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
     630:	00 c0       	rjmp	.+0      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
     632:	00 00       	nop
				{
					
					case '1' :
					LCD_WriteCmd(0x01);
					LCD_WriteString("SET TEMP :",0,0);
					for(int i=0;i<2;i++)
     634:	21 96       	adiw	r28, 0x01	; 1
     636:	c2 30       	cpi	r28, 0x02	; 2
     638:	d1 05       	cpc	r29, r1
     63a:	24 f3       	brlt	.-56     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     63c:	20 c0       	rjmp	.+64     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
						
						//send (keypad reading by SPI)
					}
					break;
					case '2':
					LCD_WriteCmd(0x01);
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
					LCD_WriteString("1)ON, 2)OFF",0,0);
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	87 e8       	ldi	r24, 0x87	; 135
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					LCD_WriteString("3)RET",1,0);
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	82 e5       	ldi	r24, 0x52	; 82
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
					while(1)
					{
						
						keypad_reading  = Keypad_read(ONE_PRESS);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 4f 04 	call	0x89e	; 0x89e <Keypad_read>
     662:	c8 2f       	mov	r28, r24
						if (keypad_reading != NO_KEY_PRESSED)
     664:	88 23       	and	r24, r24
     666:	d1 f3       	breq	.-12     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
						{
							LCD_WriteData(keypad_reading);
     668:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
							break;
						}
						

					}
					if(keypad_reading=='1')
     66c:	c1 33       	cpi	r28, 0x31	; 49
     66e:	39 f0       	breq	.+14     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
					{//send ON to cond
					}
					else if(keypad_reading=='2')
     670:	c2 33       	cpi	r28, 0x32	; 50
     672:	29 f0       	breq	.+10     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
					{//send off to cond
					}
					else
					ADMIN_Mode();
     674:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     678:	02 c0       	rjmp	.+4      	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
					break;
					
					case '3':
					ADMIN_Mode();
     67a:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
					break;
				}
				case '4':
				ADMIN_Mode();
     67e:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
				break;
			break;
			}
		}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <SmartHome_App_Start>:
#define F_CPU   1000000 
#include "SmarHome.h"
#include "avr/delay.h"
void SmartHome_App_Start()
{
	Keypad_init();
     688:	0e 94 26 04 	call	0x84c	; 0x84c <Keypad_init>
	LCD_Intialize();
     68c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <LCD_Intialize>
	DIO_SetPinDirection(PORTD,0,Output);
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD,1,Output);
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD,2,Output);
     6a4:	41 e0       	ldi	r20, 0x01	; 1
     6a6:	62 e0       	ldi	r22, 0x02	; 2
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	
	
	 uint8 Readed = EEPROM_Read(4);
     6ae:	84 e0       	ldi	r24, 0x04	; 4
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 23 08 	call	0x1046	; 0x1046 <EEPROM_Read>
	 
	 if(Readed!='S')//so its the first time to run
     6b6:	83 35       	cpi	r24, 0x53	; 83
     6b8:	19 f0       	breq	.+6      	; 0x6c0 <SmartHome_App_Start+0x38>
	 {
		 SetPassword();
     6ba:	0e 94 49 00 	call	0x92	; 0x92 <SetPassword>
     6be:	21 c0       	rjmp	.+66     	; 0x702 <SmartHome_App_Start+0x7a>
	 }
	 else //so lets take password from user
	 {
		int returned =EnterPassword();
     6c0:	0e 94 7d 00 	call	0xfa	; 0xfa <EnterPassword>
		if(returned==1)
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	e9 f4       	brne	.+58     	; 0x702 <SmartHome_App_Start+0x7a>
     6c8:	2f e3       	ldi	r18, 0x3F	; 63
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <SmartHome_App_Start+0x46>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <SmartHome_App_Start+0x50>
     6d8:	00 00       	nop
			{	
				_delay_ms(1000);
				LCD_WriteCmd(0x01);
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
				LCD_WriteString("wait20second",0,0);
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	83 e9       	ldi	r24, 0x93	; 147
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_WriteString>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	88 e0       	ldi	r24, 0x08	; 8
     6f0:	9d e3       	ldi	r25, 0x3D	; 61
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <SmartHome_App_Start+0x6a>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <SmartHome_App_Start+0x74>
     6fc:	00 00       	nop
				_delay_ms(20000);
				returned=EnterPassword();
     6fe:	0e 94 7d 00 	call	0xfa	; 0xfa <EnterPassword>
			
		
	 }		
	 
	 //lets choose the mode (ADMIN or GUEST)/////////*///////////////*
	uint8 mode =SelectMode();
     702:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SelectMode>
	
	if(mode==ADMIN)
     706:	81 33       	cpi	r24, 0x31	; 49
     708:	19 f4       	brne	.+6      	; 0x710 <SmartHome_App_Start+0x88>
	{
	   ADMIN_Mode();	
     70a:	0e 94 ca 01 	call	0x394	; 0x394 <ADMIN_Mode>
     70e:	08 95       	ret
	}
	else
	{
		Guest_Mode();
     710:	0e 94 1a 01 	call	0x234	; 0x234 <Guest_Mode>
     714:	08 95       	ret

00000716 <MapKeyPad4x4_cont>:
*of the pressed button continuously
*This function is designed for 4x4 keypad
*/

uint8 MapKeyPad4x4_cont(uint8 row){
	switch (row)
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	29 f1       	breq	.+74     	; 0x764 <MapKeyPad4x4_cont+0x4e>
     71a:	38 f0       	brcs	.+14     	; 0x72a <MapKeyPad4x4_cont+0x14>
     71c:	82 30       	cpi	r24, 0x02	; 2
     71e:	09 f4       	brne	.+2      	; 0x722 <MapKeyPad4x4_cont+0xc>
     720:	3e c0       	rjmp	.+124    	; 0x79e <MapKeyPad4x4_cont+0x88>
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	09 f4       	brne	.+2      	; 0x728 <MapKeyPad4x4_cont+0x12>
     726:	56 c0       	rjmp	.+172    	; 0x7d4 <MapKeyPad4x4_cont+0xbe>
     728:	6f c0       	rjmp	.+222    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		case 0:											/*elements of first row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
     72a:	64 e0       	ldi	r22, 0x04	; 4
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     732:	88 23       	and	r24, r24
     734:	09 f4       	brne	.+2      	; 0x738 <MapKeyPad4x4_cont+0x22>
     736:	6a c0       	rjmp	.+212    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				return '7';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
     738:	65 e0       	ldi	r22, 0x05	; 5
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     740:	88 23       	and	r24, r24
     742:	09 f4       	brne	.+2      	; 0x746 <MapKeyPad4x4_cont+0x30>
     744:	65 c0       	rjmp	.+202    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
				return '8';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <MapKeyPad4x4_cont+0x3e>
     752:	60 c0       	rjmp	.+192    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
				return '9';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_4)){
     754:	67 e0       	ldi	r22, 0x07	; 7
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     75c:	81 11       	cpse	r24, r1
     75e:	5c c0       	rjmp	.+184    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				return '/';
     760:	8f e2       	ldi	r24, 0x2F	; 47
     762:	08 95       	ret
			}
			break;
		}
		case 1:											/*elements of second row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
     764:	64 e0       	ldi	r22, 0x04	; 4
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     76c:	88 23       	and	r24, r24
     76e:	09 f4       	brne	.+2      	; 0x772 <MapKeyPad4x4_cont+0x5c>
     770:	55 c0       	rjmp	.+170    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
				return '4';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
     772:	65 e0       	ldi	r22, 0x05	; 5
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     77a:	88 23       	and	r24, r24
     77c:	09 f4       	brne	.+2      	; 0x780 <MapKeyPad4x4_cont+0x6a>
     77e:	50 c0       	rjmp	.+160    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				return '5';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
     780:	66 e0       	ldi	r22, 0x06	; 6
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     788:	88 23       	and	r24, r24
     78a:	09 f4       	brne	.+2      	; 0x78e <MapKeyPad4x4_cont+0x78>
     78c:	4b c0       	rjmp	.+150    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
				return '6';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_4)){
     78e:	67 e0       	ldi	r22, 0x07	; 7
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     796:	81 11       	cpse	r24, r1
     798:	47 c0       	rjmp	.+142    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
				return '*';
     79a:	8a e2       	ldi	r24, 0x2A	; 42
     79c:	08 95       	ret
			}
			break;
		}
		case 2:											/*elements of third row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
     79e:	64 e0       	ldi	r22, 0x04	; 4
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <MapKeyPad4x4_cont+0x96>
     7aa:	40 c0       	rjmp	.+128    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
				return '1';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
     7ac:	65 e0       	ldi	r22, 0x05	; 5
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7b4:	88 23       	and	r24, r24
     7b6:	e1 f1       	breq	.+120    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
				return '2';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
     7b8:	66 e0       	ldi	r22, 0x06	; 6
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7c0:	88 23       	and	r24, r24
     7c2:	c1 f1       	breq	.+112    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
				return '3';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_4)){
     7c4:	67 e0       	ldi	r22, 0x07	; 7
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7cc:	81 11       	cpse	r24, r1
     7ce:	34 c0       	rjmp	.+104    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				return '-';
     7d0:	8d e2       	ldi	r24, 0x2D	; 45
     7d2:	08 95       	ret
			}
			break;
		}
		case 3:											/*elements of fourth row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
     7d4:	64 e0       	ldi	r22, 0x04	; 4
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7dc:	88 23       	and	r24, r24
     7de:	71 f1       	breq	.+92     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
				return 'o';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
     7e0:	65 e0       	ldi	r22, 0x05	; 5
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7e8:	88 23       	and	r24, r24
     7ea:	51 f1       	breq	.+84     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
				return '0';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
     7ec:	66 e0       	ldi	r22, 0x06	; 6
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     7f4:	88 23       	and	r24, r24
     7f6:	31 f1       	breq	.+76     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				return '=';
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_4)){
     7f8:	67 e0       	ldi	r22, 0x07	; 7
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
     800:	81 11       	cpse	r24, r1
     802:	22 c0       	rjmp	.+68     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				return '+';
     804:	8b e2       	ldi	r24, 0x2B	; 43
     806:	08 95       	ret
			}
		}
		default:
		return 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	08 95       	ret
	switch (row)
	{
		case 0:											/*elements of first row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
				return '7';
     80c:	87 e3       	ldi	r24, 0x37	; 55
     80e:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
				return '8';
     810:	88 e3       	ldi	r24, 0x38	; 56
     812:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
				return '9';
     814:	89 e3       	ldi	r24, 0x39	; 57
     816:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	08 95       	ret
			break;
		}
		case 1:											/*elements of second row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
				return '4';
     81c:	84 e3       	ldi	r24, 0x34	; 52
     81e:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
				return '5';
     820:	85 e3       	ldi	r24, 0x35	; 53
     822:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
				return '6';
     824:	86 e3       	ldi	r24, 0x36	; 54
     826:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	08 95       	ret
			break;
		}
		case 2:											/*elements of third row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
				return '1';
     82c:	81 e3       	ldi	r24, 0x31	; 49
     82e:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
				return '2';
     830:	82 e3       	ldi	r24, 0x32	; 50
     832:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
				return '3';
     834:	83 e3       	ldi	r24, 0x33	; 51
     836:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 95       	ret
			break;
		}
		case 3:											/*elements of fourth row*/
		{
			if (!DIO_GetPinValue(Keypad_Port,COL_1)){
				return 'o';
     83c:	8f e6       	ldi	r24, 0x6F	; 111
     83e:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_2)){
				return '0';
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	08 95       	ret
			}
			else if (!DIO_GetPinValue(Keypad_Port,COL_3)){
				return '=';
     844:	8d e3       	ldi	r24, 0x3D	; 61
     846:	08 95       	ret
			else if (!DIO_GetPinValue(Keypad_Port,COL_4)){
				return '+';
			}
		}
		default:
		return 0;
     848:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
}
     84a:	08 95       	ret

0000084c <Keypad_init>:
*Expected Output: configured pins are used as DIO
*======================= make sure you configured the keypad pins in "keypad_config.h"========================
*/
void Keypad_init(){
	#ifdef ROW_1						/*Configure rows as Output*/
	DIO_SetPinDirection(Keypad_Port,ROW_1,Output);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	#ifdef ROW_2
	DIO_SetPinDirection(Keypad_Port,ROW_2,Output);
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	#ifdef ROW_3
	DIO_SetPinDirection(Keypad_Port,ROW_3,Output);
     860:	41 e0       	ldi	r20, 0x01	; 1
     862:	62 e0       	ldi	r22, 0x02	; 2
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	#ifdef ROW_4
	DIO_SetPinDirection(Keypad_Port,ROW_4,Output);
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	63 e0       	ldi	r22, 0x03	; 3
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_1						/*configure columns as inputs with pull up resistors*/
	DIO_SetPinDirection(Keypad_Port,COL_1,Input);
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_2
	DIO_SetPinDirection(Keypad_Port,COL_2,Input);
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	65 e0       	ldi	r22, 0x05	; 5
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_3
	DIO_SetPinDirection(Keypad_Port,COL_3,Input);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_4
	DIO_SetPinDirection(Keypad_Port,COL_4,Input);
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	67 e0       	ldi	r22, 0x07	; 7
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_SetPinDirection>
     89c:	08 95       	ret

0000089e <Keypad_read>:
*Inputs: none
*return: Ascii code of the pressed button {'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'o','0','=','+'}
*if no button is pressed it return NO_KEY_PRESSED which is defined in keypad.h
*/
uint8 Keypad_read(EN_KEYPAD_ReadingMode MODE)
{
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
	uint8 mapping_return = 0;							/*variable to save the return of mapping function*/
	uint8 (*CallFunc) (uint8);								/*pointer to function that will be called in reading columns according to mode*/
	
	if (MODE == ONE_PRESS){
     8a6:	81 11       	cpse	r24, r1
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <Keypad_read+0x12>
		CallFunc = MapKeyPad4x4_OnePress;
     8aa:	0b ec       	ldi	r16, 0xCB	; 203
     8ac:	14 e0       	ldi	r17, 0x04	; 4
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <Keypad_read+0x16>
	}
	else{
		CallFunc = MapKeyPad4x4_cont;
     8b0:	0b e8       	ldi	r16, 0x8B	; 139
     8b2:	13 e0       	ldi	r17, 0x03	; 3
	}
	
	for (int rows =0 ; rows<ROWS; rows++)				/*loop on the rows*/
     8b4:	c0 e0       	ldi	r28, 0x00	; 0
     8b6:	d0 e0       	ldi	r29, 0x00	; 0
     8b8:	54 c0       	rjmp	.+168    	; 0x962 <Keypad_read+0xc4>
	{
		if (rows == 0){
     8ba:	20 97       	sbiw	r28, 0x00	; 0
     8bc:	99 f4       	brne	.+38     	; 0x8e4 <Keypad_read+0x46>
			ClearBIT(Keypad_Port_Set_Clear,ROW_1);						/*move the 0 from one pin to other*/
     8be:	8b b3       	in	r24, 0x1b	; 27
     8c0:	8e 7f       	andi	r24, 0xFE	; 254
     8c2:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_2);
     8c4:	8b b3       	in	r24, 0x1b	; 27
     8c6:	82 60       	ori	r24, 0x02	; 2
     8c8:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_3);
     8ca:	8b b3       	in	r24, 0x1b	; 27
     8cc:	84 60       	ori	r24, 0x04	; 4
     8ce:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_4);
     8d0:	8b b3       	in	r24, 0x1b	; 27
     8d2:	88 60       	ori	r24, 0x08	; 8
     8d4:	8b bb       	out	0x1b, r24	; 27
			mapping_return = CallFunc(rows);		/*check for pressed column*/
     8d6:	8c 2f       	mov	r24, r28
     8d8:	f8 01       	movw	r30, r16
     8da:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <Keypad_read+0x44>
     8e0:	3f c0       	rjmp	.+126    	; 0x960 <Keypad_read+0xc2>
     8e2:	44 c0       	rjmp	.+136    	; 0x96c <Keypad_read+0xce>
				return mapping_return;					/*return value if button is pressed in the row*/
			}
		}
		else if (rows == 1){
     8e4:	c1 30       	cpi	r28, 0x01	; 1
     8e6:	d1 05       	cpc	r29, r1
     8e8:	91 f4       	brne	.+36     	; 0x90e <Keypad_read+0x70>
			
			SetBIT(Keypad_Port_Set_Clear,ROW_1);
     8ea:	8b b3       	in	r24, 0x1b	; 27
     8ec:	81 60       	ori	r24, 0x01	; 1
     8ee:	8b bb       	out	0x1b, r24	; 27
			ClearBIT(Keypad_Port_Set_Clear,ROW_2);						/*change the position of the 0 to the next row*/
     8f0:	8b b3       	in	r24, 0x1b	; 27
     8f2:	8d 7f       	andi	r24, 0xFD	; 253
     8f4:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_3);
     8f6:	8b b3       	in	r24, 0x1b	; 27
     8f8:	84 60       	ori	r24, 0x04	; 4
     8fa:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_4);
     8fc:	8b b3       	in	r24, 0x1b	; 27
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	8b bb       	out	0x1b, r24	; 27
			mapping_return = CallFunc(rows);
     902:	8c 2f       	mov	r24, r28
     904:	f8 01       	movw	r30, r16
     906:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     908:	88 23       	and	r24, r24
     90a:	51 f1       	breq	.+84     	; 0x960 <Keypad_read+0xc2>
     90c:	2f c0       	rjmp	.+94     	; 0x96c <Keypad_read+0xce>
				return mapping_return;
			}
		}
		else if (rows == 2){
     90e:	c2 30       	cpi	r28, 0x02	; 2
     910:	d1 05       	cpc	r29, r1
     912:	91 f4       	brne	.+36     	; 0x938 <Keypad_read+0x9a>
			
			SetBIT(Keypad_Port_Set_Clear,ROW_1);
     914:	8b b3       	in	r24, 0x1b	; 27
     916:	81 60       	ori	r24, 0x01	; 1
     918:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_2);
     91a:	8b b3       	in	r24, 0x1b	; 27
     91c:	82 60       	ori	r24, 0x02	; 2
     91e:	8b bb       	out	0x1b, r24	; 27
			ClearBIT(Keypad_Port_Set_Clear,ROW_3);
     920:	8b b3       	in	r24, 0x1b	; 27
     922:	8b 7f       	andi	r24, 0xFB	; 251
     924:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_4);
     926:	8b b3       	in	r24, 0x1b	; 27
     928:	88 60       	ori	r24, 0x08	; 8
     92a:	8b bb       	out	0x1b, r24	; 27
			mapping_return = CallFunc(rows);
     92c:	8c 2f       	mov	r24, r28
     92e:	f8 01       	movw	r30, r16
     930:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     932:	88 23       	and	r24, r24
     934:	a9 f0       	breq	.+42     	; 0x960 <Keypad_read+0xc2>
     936:	1a c0       	rjmp	.+52     	; 0x96c <Keypad_read+0xce>
				return mapping_return;
			}
		}
		else if (rows == 3){
     938:	c3 30       	cpi	r28, 0x03	; 3
     93a:	d1 05       	cpc	r29, r1
     93c:	89 f4       	brne	.+34     	; 0x960 <Keypad_read+0xc2>
			
			SetBIT(Keypad_Port_Set_Clear,ROW_1);
     93e:	8b b3       	in	r24, 0x1b	; 27
     940:	81 60       	ori	r24, 0x01	; 1
     942:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_2);
     944:	8b b3       	in	r24, 0x1b	; 27
     946:	82 60       	ori	r24, 0x02	; 2
     948:	8b bb       	out	0x1b, r24	; 27
			SetBIT(Keypad_Port_Set_Clear,ROW_3);
     94a:	8b b3       	in	r24, 0x1b	; 27
     94c:	84 60       	ori	r24, 0x04	; 4
     94e:	8b bb       	out	0x1b, r24	; 27
			ClearBIT(Keypad_Port_Set_Clear,ROW_4);
     950:	8b b3       	in	r24, 0x1b	; 27
     952:	87 7f       	andi	r24, 0xF7	; 247
     954:	8b bb       	out	0x1b, r24	; 27
			mapping_return = CallFunc(rows);
     956:	8c 2f       	mov	r24, r28
     958:	f8 01       	movw	r30, r16
     95a:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     95c:	81 11       	cpse	r24, r1
     95e:	06 c0       	rjmp	.+12     	; 0x96c <Keypad_read+0xce>
	}
	else{
		CallFunc = MapKeyPad4x4_cont;
	}
	
	for (int rows =0 ; rows<ROWS; rows++)				/*loop on the rows*/
     960:	21 96       	adiw	r28, 0x01	; 1
     962:	c4 30       	cpi	r28, 0x04	; 4
     964:	d1 05       	cpc	r29, r1
     966:	0c f4       	brge	.+2      	; 0x96a <Keypad_read+0xcc>
     968:	a8 cf       	rjmp	.-176    	; 0x8ba <Keypad_read+0x1c>
				return mapping_return;
			}
		}
		
	}
	return NO_KEY_PRESSED;
     96a:	80 e0       	ldi	r24, 0x00	; 0
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <read_one_press>:
*I/O parameters:	uint8_t* last_value reserves the last pin state
*return:	return pin state one time only and return any other value for the rest of readings
*
*/
uint8 read_one_press(DIO_Port_ID port,DIO_PIN_ID pin,uint8* last_value)
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ea 01       	movw	r28, r20
	uint8 current_value =0;

	uint8 return_value = 0;
	
	current_value = DIO_GetPinValue(port,pin);
     97c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_GetPinValue>
	
	if (current_value!= (*last_value)){
     980:	98 81       	ld	r25, Y
     982:	89 13       	cpse	r24, r25
     984:	02 c0       	rjmp	.+4      	; 0x98a <read_one_press+0x14>
		return_value = current_value;					/*return pressed value */
	}
	else return_value = 2;								/*return any other value*/
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	01 c0       	rjmp	.+2      	; 0x98c <read_one_press+0x16>
	uint8 return_value = 0;
	
	current_value = DIO_GetPinValue(port,pin);
	
	if (current_value!= (*last_value)){
		return_value = current_value;					/*return pressed value */
     98a:	98 2f       	mov	r25, r24
	}
	else return_value = 2;								/*return any other value*/
	
	*last_value = current_value;							/*update variables*/
     98c:	88 83       	st	Y, r24
	
	return return_value;
}
     98e:	89 2f       	mov	r24, r25
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <MapKeyPad4x4_OnePress>:
*This function is designed for 4x4 keypad
*/

uint8 MapKeyPad4x4_OnePress(uint8 row){
	static uint8 lastpresses[16] = {0};
	switch (row)
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	69 f1       	breq	.+90     	; 0x9f4 <MapKeyPad4x4_OnePress+0x5e>
     99a:	38 f0       	brcs	.+14     	; 0x9aa <MapKeyPad4x4_OnePress+0x14>
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	09 f4       	brne	.+2      	; 0x9a2 <MapKeyPad4x4_OnePress+0xc>
     9a0:	4e c0       	rjmp	.+156    	; 0xa3e <MapKeyPad4x4_OnePress+0xa8>
     9a2:	83 30       	cpi	r24, 0x03	; 3
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <MapKeyPad4x4_OnePress+0x12>
     9a6:	70 c0       	rjmp	.+224    	; 0xa88 <MapKeyPad4x4_OnePress+0xf2>
     9a8:	91 c0       	rjmp	.+290    	; 0xacc <MapKeyPad4x4_OnePress+0x136>
	{
		case 0:											/*elements of first row*/
		{
			
			if (read_one_press(Keypad_Port,COL_1,&lastpresses[0])==LOW){
     9aa:	40 ea       	ldi	r20, 0xA0	; 160
     9ac:	51 e0       	ldi	r21, 0x01	; 1
     9ae:	64 e0       	ldi	r22, 0x04	; 4
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <MapKeyPad4x4_OnePress+0x26>
     9ba:	8a c0       	rjmp	.+276    	; 0xad0 <MapKeyPad4x4_OnePress+0x13a>
				return '7';
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[1])==LOW){
     9bc:	41 ea       	ldi	r20, 0xA1	; 161
     9be:	51 e0       	ldi	r21, 0x01	; 1
     9c0:	65 e0       	ldi	r22, 0x05	; 5
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     9c8:	88 23       	and	r24, r24
     9ca:	09 f4       	brne	.+2      	; 0x9ce <MapKeyPad4x4_OnePress+0x38>
     9cc:	83 c0       	rjmp	.+262    	; 0xad4 <MapKeyPad4x4_OnePress+0x13e>
				return '8';
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[2])==LOW){
     9ce:	42 ea       	ldi	r20, 0xA2	; 162
     9d0:	51 e0       	ldi	r21, 0x01	; 1
     9d2:	66 e0       	ldi	r22, 0x06	; 6
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <MapKeyPad4x4_OnePress+0x4a>
     9de:	7c c0       	rjmp	.+248    	; 0xad8 <MapKeyPad4x4_OnePress+0x142>
				return '9';
			}
			else if (read_one_press(Keypad_Port,COL_4,&lastpresses[3])==LOW){
     9e0:	43 ea       	ldi	r20, 0xA3	; 163
     9e2:	51 e0       	ldi	r21, 0x01	; 1
     9e4:	67 e0       	ldi	r22, 0x07	; 7
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     9ec:	81 11       	cpse	r24, r1
     9ee:	76 c0       	rjmp	.+236    	; 0xadc <MapKeyPad4x4_OnePress+0x146>
				return '/';
     9f0:	8f e2       	ldi	r24, 0x2F	; 47
     9f2:	08 95       	ret
		
		case 1:											/*elements of second row*/
		{
						

			if (read_one_press(Keypad_Port,COL_1,&lastpresses[4])==LOW){
     9f4:	44 ea       	ldi	r20, 0xA4	; 164
     9f6:	51 e0       	ldi	r21, 0x01	; 1
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a00:	88 23       	and	r24, r24
     a02:	09 f4       	brne	.+2      	; 0xa06 <MapKeyPad4x4_OnePress+0x70>
     a04:	6d c0       	rjmp	.+218    	; 0xae0 <MapKeyPad4x4_OnePress+0x14a>
				return '4';
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[5])==LOW){
     a06:	45 ea       	ldi	r20, 0xA5	; 165
     a08:	51 e0       	ldi	r21, 0x01	; 1
     a0a:	65 e0       	ldi	r22, 0x05	; 5
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a12:	88 23       	and	r24, r24
     a14:	09 f4       	brne	.+2      	; 0xa18 <MapKeyPad4x4_OnePress+0x82>
     a16:	66 c0       	rjmp	.+204    	; 0xae4 <MapKeyPad4x4_OnePress+0x14e>
				return '5';
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[6])==LOW){
     a18:	46 ea       	ldi	r20, 0xA6	; 166
     a1a:	51 e0       	ldi	r21, 0x01	; 1
     a1c:	66 e0       	ldi	r22, 0x06	; 6
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a24:	88 23       	and	r24, r24
     a26:	09 f4       	brne	.+2      	; 0xa2a <MapKeyPad4x4_OnePress+0x94>
     a28:	5f c0       	rjmp	.+190    	; 0xae8 <MapKeyPad4x4_OnePress+0x152>
				return '6';
			}
			else if (read_one_press(Keypad_Port,COL_4,&lastpresses[7])==LOW){
     a2a:	47 ea       	ldi	r20, 0xA7	; 167
     a2c:	51 e0       	ldi	r21, 0x01	; 1
     a2e:	67 e0       	ldi	r22, 0x07	; 7
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a36:	81 11       	cpse	r24, r1
     a38:	59 c0       	rjmp	.+178    	; 0xaec <MapKeyPad4x4_OnePress+0x156>
				return '*';
     a3a:	8a e2       	ldi	r24, 0x2A	; 42
     a3c:	08 95       	ret
		}
		case 2:											/*elements of third row*/
		{
						

			if (read_one_press(Keypad_Port,COL_1,&lastpresses[8])==LOW){
     a3e:	48 ea       	ldi	r20, 0xA8	; 168
     a40:	51 e0       	ldi	r21, 0x01	; 1
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a4a:	88 23       	and	r24, r24
     a4c:	09 f4       	brne	.+2      	; 0xa50 <MapKeyPad4x4_OnePress+0xba>
     a4e:	50 c0       	rjmp	.+160    	; 0xaf0 <MapKeyPad4x4_OnePress+0x15a>
				return '1';
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[9])==LOW){
     a50:	49 ea       	ldi	r20, 0xA9	; 169
     a52:	51 e0       	ldi	r21, 0x01	; 1
     a54:	65 e0       	ldi	r22, 0x05	; 5
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <MapKeyPad4x4_OnePress+0xcc>
     a60:	49 c0       	rjmp	.+146    	; 0xaf4 <MapKeyPad4x4_OnePress+0x15e>
				return '2';
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[10])==LOW){
     a62:	4a ea       	ldi	r20, 0xAA	; 170
     a64:	51 e0       	ldi	r21, 0x01	; 1
     a66:	66 e0       	ldi	r22, 0x06	; 6
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <MapKeyPad4x4_OnePress+0xde>
     a72:	42 c0       	rjmp	.+132    	; 0xaf8 <MapKeyPad4x4_OnePress+0x162>
				return '3';
			}
			else if (read_one_press(Keypad_Port,COL_4,&lastpresses[11])==LOW){
     a74:	4b ea       	ldi	r20, 0xAB	; 171
     a76:	51 e0       	ldi	r21, 0x01	; 1
     a78:	67 e0       	ldi	r22, 0x07	; 7
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a80:	81 11       	cpse	r24, r1
     a82:	3c c0       	rjmp	.+120    	; 0xafc <MapKeyPad4x4_OnePress+0x166>
				return '-';
     a84:	8d e2       	ldi	r24, 0x2D	; 45
     a86:	08 95       	ret
		}
		case 3:											/*elements of fourth row*/
		{
						

			if (read_one_press(Keypad_Port,COL_1,&lastpresses[12])==LOW){
     a88:	4c ea       	ldi	r20, 0xAC	; 172
     a8a:	51 e0       	ldi	r21, 0x01	; 1
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     a94:	88 23       	and	r24, r24
     a96:	a1 f1       	breq	.+104    	; 0xb00 <MapKeyPad4x4_OnePress+0x16a>
				return 'o';
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[13])==LOW){
     a98:	4d ea       	ldi	r20, 0xAD	; 173
     a9a:	51 e0       	ldi	r21, 0x01	; 1
     a9c:	65 e0       	ldi	r22, 0x05	; 5
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     aa4:	88 23       	and	r24, r24
     aa6:	71 f1       	breq	.+92     	; 0xb04 <MapKeyPad4x4_OnePress+0x16e>
				return '0';
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[14])==LOW){
     aa8:	4e ea       	ldi	r20, 0xAE	; 174
     aaa:	51 e0       	ldi	r21, 0x01	; 1
     aac:	66 e0       	ldi	r22, 0x06	; 6
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     ab4:	88 23       	and	r24, r24
     ab6:	41 f1       	breq	.+80     	; 0xb08 <MapKeyPad4x4_OnePress+0x172>
				return '=';
			}
			else if (read_one_press(Keypad_Port,COL_4,&lastpresses[15])==LOW){
     ab8:	4f ea       	ldi	r20, 0xAF	; 175
     aba:	51 e0       	ldi	r21, 0x01	; 1
     abc:	67 e0       	ldi	r22, 0x07	; 7
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 bb 04 	call	0x976	; 0x976 <read_one_press>
     ac4:	81 11       	cpse	r24, r1
     ac6:	22 c0       	rjmp	.+68     	; 0xb0c <MapKeyPad4x4_OnePress+0x176>
				return '+';
     ac8:	8b e2       	ldi	r24, 0x2B	; 43
     aca:	08 95       	ret
			}
		}
		default:
		return 0;
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	08 95       	ret
	{
		case 0:											/*elements of first row*/
		{
			
			if (read_one_press(Keypad_Port,COL_1,&lastpresses[0])==LOW){
				return '7';
     ad0:	87 e3       	ldi	r24, 0x37	; 55
     ad2:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[1])==LOW){
				return '8';
     ad4:	88 e3       	ldi	r24, 0x38	; 56
     ad6:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[2])==LOW){
				return '9';
     ad8:	89 e3       	ldi	r24, 0x39	; 57
     ada:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret
		case 1:											/*elements of second row*/
		{
						

			if (read_one_press(Keypad_Port,COL_1,&lastpresses[4])==LOW){
				return '4';
     ae0:	84 e3       	ldi	r24, 0x34	; 52
     ae2:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[5])==LOW){
				return '5';
     ae4:	85 e3       	ldi	r24, 0x35	; 53
     ae6:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[6])==LOW){
				return '6';
     ae8:	86 e3       	ldi	r24, 0x36	; 54
     aea:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 95       	ret
		case 2:											/*elements of third row*/
		{
						

			if (read_one_press(Keypad_Port,COL_1,&lastpresses[8])==LOW){
				return '1';
     af0:	81 e3       	ldi	r24, 0x31	; 49
     af2:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[9])==LOW){
				return '2';
     af4:	82 e3       	ldi	r24, 0x32	; 50
     af6:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[10])==LOW){
				return '3';
     af8:	83 e3       	ldi	r24, 0x33	; 51
     afa:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
		case 3:											/*elements of fourth row*/
		{
						

			if (read_one_press(Keypad_Port,COL_1,&lastpresses[12])==LOW){
				return 'o';
     b00:	8f e6       	ldi	r24, 0x6F	; 111
     b02:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_2,&lastpresses[13])==LOW){
				return '0';
     b04:	80 e3       	ldi	r24, 0x30	; 48
     b06:	08 95       	ret
			}
			else if (read_one_press(Keypad_Port,COL_3,&lastpresses[14])==LOW){
				return '=';
     b08:	8d e3       	ldi	r24, 0x3D	; 61
     b0a:	08 95       	ret
			else if (read_one_press(Keypad_Port,COL_4,&lastpresses[15])==LOW){
				return '+';
			}
		}
		default:
		return 0;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     b0e:	08 95       	ret

00000b10 <LCD_WriteCmd>:


static uint8 InitStepFinished = 0;

void LCD_WriteCmd(uint8 Cmd)
{
     b10:	cf 93       	push	r28
     b12:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(PORTC,PIN0,LOW);//RS and R/W should be low to write command
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,PIN1,LOW);
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	
	
	DIO_SetPinValue(PORTC,PIN4,GetBIT(Cmd,4));
     b28:	c4 fb       	bst	r28, 4
     b2a:	44 27       	eor	r20, r20
     b2c:	40 f9       	bld	r20, 0
     b2e:	64 e0       	ldi	r22, 0x04	; 4
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,PIN5,GetBIT(Cmd,5));
     b36:	c5 fb       	bst	r28, 5
     b38:	44 27       	eor	r20, r20
     b3a:	40 f9       	bld	r20, 0
     b3c:	65 e0       	ldi	r22, 0x05	; 5
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,PIN6,GetBIT(Cmd,6));
     b44:	c6 fb       	bst	r28, 6
     b46:	44 27       	eor	r20, r20
     b48:	40 f9       	bld	r20, 0
     b4a:	66 e0       	ldi	r22, 0x06	; 6
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,PIN7,GetBIT(Cmd,7));
     b52:	4c 2f       	mov	r20, r28
     b54:	44 1f       	adc	r20, r20
     b56:	44 27       	eor	r20, r20
     b58:	44 1f       	adc	r20, r20
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	
	//delay and reading by down Edge
	
					//
					DIO_SetPinValue(PORTC,PIN2,HIGH);
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
     b6c:	83 ec       	ldi	r24, 0xC3	; 195
     b6e:	99 e0       	ldi	r25, 0x09	; 9
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <LCD_WriteCmd+0x60>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <LCD_WriteCmd+0x66>
     b76:	00 00       	nop
					_delay_ms(1);                       //delay for reading block
					DIO_SetPinValue(PORTC,PIN2,LOW);
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	
					//
	if(InitStepFinished)
     b82:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <InitStepFinished>
     b86:	88 23       	and	r24, r24
     b88:	59 f1       	breq	.+86     	; 0xbe0 <LCD_WriteCmd+0xd0>
	{
		
		DIO_SetPinValue(PORTC,PIN4,GetBIT(Cmd,0));
     b8a:	4c 2f       	mov	r20, r28
     b8c:	41 70       	andi	r20, 0x01	; 1
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN5,GetBIT(Cmd,1));
     b96:	c1 fb       	bst	r28, 1
     b98:	44 27       	eor	r20, r20
     b9a:	40 f9       	bld	r20, 0
     b9c:	65 e0       	ldi	r22, 0x05	; 5
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN6,GetBIT(Cmd,2));
     ba4:	c2 fb       	bst	r28, 2
     ba6:	44 27       	eor	r20, r20
     ba8:	40 f9       	bld	r20, 0
     baa:	66 e0       	ldi	r22, 0x06	; 6
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN7,GetBIT(Cmd,3));
     bb2:	c3 fb       	bst	r28, 3
     bb4:	44 27       	eor	r20, r20
     bb6:	40 f9       	bld	r20, 0
     bb8:	67 e0       	ldi	r22, 0x07	; 7
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>

		//delay and reading by down Edge
		
					//
					DIO_SetPinValue(PORTC,PIN2,HIGH);
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	62 e0       	ldi	r22, 0x02	; 2
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
     bca:	83 ec       	ldi	r24, 0xC3	; 195
     bcc:	99 e0       	ldi	r25, 0x09	; 9
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <LCD_WriteCmd+0xbe>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <LCD_WriteCmd+0xc4>
     bd4:	00 00       	nop
					_delay_ms(1);                       //delay for reading block
					DIO_SetPinValue(PORTC,PIN2,LOW);
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		
					//
	}
	
	
}
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <LCD_Intialize>:
void LCD_Intialize()
{
	DIO_SetPortDirection(PORTC,Output);
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_SetPortDirection>
     bec:	2f e5       	ldi	r18, 0x5F	; 95
     bee:	8a ee       	ldi	r24, 0xEA	; 234
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	80 40       	sbci	r24, 0x00	; 0
     bf6:	90 40       	sbci	r25, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <LCD_Intialize+0xe>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <LCD_Intialize+0x18>
     bfc:	00 00       	nop
	_delay_ms(30);
	LCD_WriteCmd(0x20);///intialize orders
     bfe:	80 e2       	ldi	r24, 0x20	; 32
     c00:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	LCD_WriteCmd(0x20);
     c04:	80 e2       	ldi	r24, 0x20	; 32
     c06:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	LCD_WriteCmd(0x80);
     c0a:	80 e8       	ldi	r24, 0x80	; 128
     c0c:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
     c10:	83 ec       	ldi	r24, 0xC3	; 195
     c12:	99 e0       	ldi	r25, 0x09	; 9
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_Intialize+0x30>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <LCD_Intialize+0x36>
     c1a:	00 00       	nop
	_delay_ms(1);
	LCD_WriteCmd(0x00);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	LCD_WriteCmd(0xf0);
     c22:	80 ef       	ldi	r24, 0xF0	; 240
     c24:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
     c28:	83 ec       	ldi	r24, 0xC3	; 195
     c2a:	99 e0       	ldi	r25, 0x09	; 9
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <LCD_Intialize+0x48>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <LCD_Intialize+0x4e>
     c32:	00 00       	nop
	_delay_ms(1);
	LCD_WriteCmd(0x00);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
	LCD_WriteCmd(0x10);
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
     c40:	87 e8       	ldi	r24, 0x87	; 135
     c42:	93 e1       	ldi	r25, 0x13	; 19
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <LCD_Intialize+0x60>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <LCD_Intialize+0x66>
     c4a:	00 00       	nop
	_delay_ms(2);
	
	InitStepFinished=1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <InitStepFinished>
     c52:	08 95       	ret

00000c54 <LCD_WriteData>:
	
}

void LCD_WriteData(uint8 Data)
{
     c54:	cf 93       	push	r28
     c56:	c8 2f       	mov	r28, r24
		DIO_SetPinValue(PORTC,PIN0,HIGH);//RS and R/W should be high and  low to write Data
     c58:	41 e0       	ldi	r20, 0x01	; 1
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN1,LOW);
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	
	
		DIO_SetPinValue(PORTC,PIN4,GetBIT(Data,4));
     c6c:	c4 fb       	bst	r28, 4
     c6e:	44 27       	eor	r20, r20
     c70:	40 f9       	bld	r20, 0
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN5,GetBIT(Data,5));
     c7a:	c5 fb       	bst	r28, 5
     c7c:	44 27       	eor	r20, r20
     c7e:	40 f9       	bld	r20, 0
     c80:	65 e0       	ldi	r22, 0x05	; 5
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN6,GetBIT(Data,6));
     c88:	c6 fb       	bst	r28, 6
     c8a:	44 27       	eor	r20, r20
     c8c:	40 f9       	bld	r20, 0
     c8e:	66 e0       	ldi	r22, 0x06	; 6
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN7,GetBIT(Data,7));
     c96:	4c 2f       	mov	r20, r28
     c98:	44 1f       	adc	r20, r20
     c9a:	44 27       	eor	r20, r20
     c9c:	44 1f       	adc	r20, r20
     c9e:	67 e0       	ldi	r22, 0x07	; 7
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	
							//delay and reading by down Edge
	
							//
							DIO_SetPinValue(PORTC,PIN2,HIGH);
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
     cb0:	83 ec       	ldi	r24, 0xC3	; 195
     cb2:	99 e0       	ldi	r25, 0x09	; 9
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_WriteData+0x60>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <LCD_WriteData+0x66>
     cba:	00 00       	nop
							_delay_ms(1);                       //delay for reading block
							DIO_SetPinValue(PORTC,PIN2,LOW);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
	
							//
	
		
		DIO_SetPinValue(PORTC,PIN4,GetBIT(Data,0));
     cc6:	4c 2f       	mov	r20, r28
     cc8:	41 70       	andi	r20, 0x01	; 1
     cca:	64 e0       	ldi	r22, 0x04	; 4
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN5,GetBIT(Data,1));
     cd2:	c1 fb       	bst	r28, 1
     cd4:	44 27       	eor	r20, r20
     cd6:	40 f9       	bld	r20, 0
     cd8:	65 e0       	ldi	r22, 0x05	; 5
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN6,GetBIT(Data,2));
     ce0:	c2 fb       	bst	r28, 2
     ce2:	44 27       	eor	r20, r20
     ce4:	40 f9       	bld	r20, 0
     ce6:	66 e0       	ldi	r22, 0x06	; 6
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		DIO_SetPinValue(PORTC,PIN7,GetBIT(Data,3));
     cee:	c3 fb       	bst	r28, 3
     cf0:	44 27       	eor	r20, r20
     cf2:	40 f9       	bld	r20, 0
     cf4:	67 e0       	ldi	r22, 0x07	; 7
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>

							//delay and reading by down Edge
		
							//
							DIO_SetPinValue(PORTC,PIN2,HIGH);
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
     d06:	83 ec       	ldi	r24, 0xC3	; 195
     d08:	99 e0       	ldi	r25, 0x09	; 9
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <LCD_WriteData+0xb6>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <LCD_WriteData+0xbc>
     d10:	00 00       	nop
							_delay_ms(1);                       //delay for reading block
							DIO_SetPinValue(PORTC,PIN2,LOW);
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	62 e0       	ldi	r22, 0x02	; 2
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinValue>
		
							//
	
	
	
}
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <LCD_GoToPos>:
void LCD_GoToPos(uint8 Row,uint8 Column)
{
	if((Row<2)&&(Column<16))
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	50 f4       	brcc	.+20     	; 0xd38 <LCD_GoToPos+0x18>
     d24:	60 31       	cpi	r22, 0x10	; 16
     d26:	40 f4       	brcc	.+16     	; 0xd38 <LCD_GoToPos+0x18>
	{
		uint8 Address=(Row*0x40)+Column;
     d28:	90 e4       	ldi	r25, 0x40	; 64
     d2a:	89 9f       	mul	r24, r25
     d2c:	60 0d       	add	r22, r0
     d2e:	11 24       	eor	r1, r1
     d30:	86 2f       	mov	r24, r22
		SetBIT(Address,7);
		LCD_WriteCmd(Address);
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_WriteCmd>
     d38:	08 95       	ret

00000d3a <LCD_WriteString>:
	}
}
void LCD_WriteString(char *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	8c 01       	movw	r16, r24
     d42:	86 2f       	mov	r24, r22
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
     d44:	64 2f       	mov	r22, r20
     d46:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_GoToPos>
	uint8 chars_iterator;
	for (chars_iterator=0;Str[chars_iterator]!='\0';chars_iterator++)//while ends by ending of string
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <LCD_WriteString+0x1a>
	{
		LCD_WriteData(Str[chars_iterator]);
     d4e:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_WriteData>
void LCD_WriteString(char *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
	uint8 chars_iterator;
	for (chars_iterator=0;Str[chars_iterator]!='\0';chars_iterator++)//while ends by ending of string
     d52:	cf 5f       	subi	r28, 0xFF	; 255
     d54:	f8 01       	movw	r30, r16
     d56:	ec 0f       	add	r30, r28
     d58:	f1 1d       	adc	r31, r1
     d5a:	80 81       	ld	r24, Z
     d5c:	81 11       	cpse	r24, r1
     d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <LCD_WriteString+0x14>
	{
		LCD_WriteData(Str[chars_iterator]);
	}
}
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <main>:

#include "APP/SmartHome/SmarHome.h"

int main()
{
SmartHome_App_Start();
     d68:	0e 94 44 03 	call	0x688	; 0x688 <SmartHome_App_Start>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	08 95       	ret

00000d72 <__vector_16>:
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
     d94:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <ADC_CallBackPtr>
     d98:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <ADC_CallBackPtr+0x1>
     d9c:	30 97       	sbiw	r30, 0x00	; 0
     d9e:	09 f0       	breq	.+2      	; 0xda2 <__vector_16+0x30>
     da0:	09 95       	icall
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	bf 91       	pop	r27
     da8:	af 91       	pop	r26
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	7f 91       	pop	r23
     db0:	6f 91       	pop	r22
     db2:	5f 91       	pop	r21
     db4:	4f 91       	pop	r20
     db6:	3f 91       	pop	r19
     db8:	2f 91       	pop	r18
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	0f 90       	pop	r0
     dc0:	1f 90       	pop	r1
     dc2:	18 95       	reti

00000dc4 <DIO_SetPortDirection>:
     dc4:	61 30       	cpi	r22, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <DIO_SetPortDirection+0x2c>
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	49 f0       	breq	.+18     	; 0xdde <DIO_SetPortDirection+0x1a>
     dcc:	28 f0       	brcs	.+10     	; 0xdd8 <DIO_SetPortDirection+0x14>
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	49 f0       	breq	.+18     	; 0xde4 <DIO_SetPortDirection+0x20>
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	51 f0       	breq	.+20     	; 0xdea <DIO_SetPortDirection+0x26>
     dd6:	08 95       	ret
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	8a bb       	out	0x1a, r24	; 26
     ddc:	08 95       	ret
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	87 bb       	out	0x17, r24	; 23
     de2:	08 95       	ret
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	84 bb       	out	0x14, r24	; 20
     de8:	08 95       	ret
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	81 bb       	out	0x11, r24	; 17
     dee:	08 95       	ret
     df0:	61 11       	cpse	r22, r1
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <DIO_SetPortDirection+0x4e>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	41 f0       	breq	.+16     	; 0xe08 <DIO_SetPortDirection+0x44>
     df8:	28 f0       	brcs	.+10     	; 0xe04 <DIO_SetPortDirection+0x40>
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	39 f0       	breq	.+14     	; 0xe0c <DIO_SetPortDirection+0x48>
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	39 f0       	breq	.+14     	; 0xe10 <DIO_SetPortDirection+0x4c>
     e02:	08 95       	ret
     e04:	1a ba       	out	0x1a, r1	; 26
     e06:	08 95       	ret
     e08:	17 ba       	out	0x17, r1	; 23
     e0a:	08 95       	ret
     e0c:	14 ba       	out	0x14, r1	; 20
     e0e:	08 95       	ret
     e10:	11 ba       	out	0x11, r1	; 17
     e12:	08 95       	ret

00000e14 <DIO_SetPinDirection>:
     e14:	41 11       	cpse	r20, r1
     e16:	38 c0       	rjmp	.+112    	; 0xe88 <DIO_SetPinDirection+0x74>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 f0       	breq	.+36     	; 0xe40 <DIO_SetPinDirection+0x2c>
     e1c:	28 f0       	brcs	.+10     	; 0xe28 <DIO_SetPinDirection+0x14>
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	d9 f0       	breq	.+54     	; 0xe58 <DIO_SetPinDirection+0x44>
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	29 f1       	breq	.+74     	; 0xe70 <DIO_SetPinDirection+0x5c>
     e26:	08 95       	ret
     e28:	2a b3       	in	r18, 0x1a	; 26
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_SetPinDirection+0x20>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	6a 95       	dec	r22
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_SetPinDirection+0x1c>
     e38:	80 95       	com	r24
     e3a:	82 23       	and	r24, r18
     e3c:	8a bb       	out	0x1a, r24	; 26
     e3e:	08 95       	ret
     e40:	27 b3       	in	r18, 0x17	; 23
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_SetPinDirection+0x38>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	6a 95       	dec	r22
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_SetPinDirection+0x34>
     e50:	80 95       	com	r24
     e52:	82 23       	and	r24, r18
     e54:	87 bb       	out	0x17, r24	; 23
     e56:	08 95       	ret
     e58:	24 b3       	in	r18, 0x14	; 20
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_SetPinDirection+0x50>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	6a 95       	dec	r22
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_SetPinDirection+0x4c>
     e68:	80 95       	com	r24
     e6a:	82 23       	and	r24, r18
     e6c:	84 bb       	out	0x14, r24	; 20
     e6e:	08 95       	ret
     e70:	21 b3       	in	r18, 0x11	; 17
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_SetPinDirection+0x68>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	6a 95       	dec	r22
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_SetPinDirection+0x64>
     e80:	80 95       	com	r24
     e82:	82 23       	and	r24, r18
     e84:	81 bb       	out	0x11, r24	; 17
     e86:	08 95       	ret
     e88:	41 30       	cpi	r20, 0x01	; 1
     e8a:	99 f5       	brne	.+102    	; 0xef2 <DIO_SetPinDirection+0xde>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	89 f0       	breq	.+34     	; 0xeb2 <DIO_SetPinDirection+0x9e>
     e90:	28 f0       	brcs	.+10     	; 0xe9c <DIO_SetPinDirection+0x88>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	c9 f0       	breq	.+50     	; 0xec8 <DIO_SetPinDirection+0xb4>
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	11 f1       	breq	.+68     	; 0xede <DIO_SetPinDirection+0xca>
     e9a:	08 95       	ret
     e9c:	2a b3       	in	r18, 0x1a	; 26
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_SetPinDirection+0x94>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	6a 95       	dec	r22
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_SetPinDirection+0x90>
     eac:	82 2b       	or	r24, r18
     eae:	8a bb       	out	0x1a, r24	; 26
     eb0:	08 95       	ret
     eb2:	27 b3       	in	r18, 0x17	; 23
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_SetPinDirection+0xaa>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	6a 95       	dec	r22
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_SetPinDirection+0xa6>
     ec2:	82 2b       	or	r24, r18
     ec4:	87 bb       	out	0x17, r24	; 23
     ec6:	08 95       	ret
     ec8:	24 b3       	in	r18, 0x14	; 20
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_SetPinDirection+0xc0>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	6a 95       	dec	r22
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_SetPinDirection+0xbc>
     ed8:	82 2b       	or	r24, r18
     eda:	84 bb       	out	0x14, r24	; 20
     edc:	08 95       	ret
     ede:	21 b3       	in	r18, 0x11	; 17
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_SetPinDirection+0xd6>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	6a 95       	dec	r22
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_SetPinDirection+0xd2>
     eee:	82 2b       	or	r24, r18
     ef0:	81 bb       	out	0x11, r24	; 17
     ef2:	08 95       	ret

00000ef4 <DIO_SetPinValue>:
     ef4:	41 30       	cpi	r20, 0x01	; 1
     ef6:	a1 f5       	brne	.+104    	; 0xf60 <DIO_SetPinValue+0x6c>
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	89 f0       	breq	.+34     	; 0xf1e <DIO_SetPinValue+0x2a>
     efc:	28 f0       	brcs	.+10     	; 0xf08 <DIO_SetPinValue+0x14>
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	c9 f0       	breq	.+50     	; 0xf34 <DIO_SetPinValue+0x40>
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	11 f1       	breq	.+68     	; 0xf4a <DIO_SetPinValue+0x56>
     f06:	08 95       	ret
     f08:	2b b3       	in	r18, 0x1b	; 27
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_SetPinValue+0x20>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	6a 95       	dec	r22
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_SetPinValue+0x1c>
     f18:	82 2b       	or	r24, r18
     f1a:	8b bb       	out	0x1b, r24	; 27
     f1c:	08 95       	ret
     f1e:	28 b3       	in	r18, 0x18	; 24
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_SetPinValue+0x36>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	6a 95       	dec	r22
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_SetPinValue+0x32>
     f2e:	82 2b       	or	r24, r18
     f30:	88 bb       	out	0x18, r24	; 24
     f32:	08 95       	ret
     f34:	25 b3       	in	r18, 0x15	; 21
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_SetPinValue+0x4c>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	6a 95       	dec	r22
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_SetPinValue+0x48>
     f44:	82 2b       	or	r24, r18
     f46:	85 bb       	out	0x15, r24	; 21
     f48:	08 95       	ret
     f4a:	22 b3       	in	r18, 0x12	; 18
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_SetPinValue+0x62>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	6a 95       	dec	r22
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_SetPinValue+0x5e>
     f5a:	82 2b       	or	r24, r18
     f5c:	82 bb       	out	0x12, r24	; 18
     f5e:	08 95       	ret
     f60:	41 11       	cpse	r20, r1
     f62:	37 c0       	rjmp	.+110    	; 0xfd2 <DIO_SetPinValue+0xde>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 f0       	breq	.+36     	; 0xf8c <DIO_SetPinValue+0x98>
     f68:	28 f0       	brcs	.+10     	; 0xf74 <DIO_SetPinValue+0x80>
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	d9 f0       	breq	.+54     	; 0xfa4 <DIO_SetPinValue+0xb0>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	29 f1       	breq	.+74     	; 0xfbc <DIO_SetPinValue+0xc8>
     f72:	08 95       	ret
     f74:	2b b3       	in	r18, 0x1b	; 27
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_SetPinValue+0x8c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	6a 95       	dec	r22
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_SetPinValue+0x88>
     f84:	80 95       	com	r24
     f86:	82 23       	and	r24, r18
     f88:	8b bb       	out	0x1b, r24	; 27
     f8a:	08 95       	ret
     f8c:	28 b3       	in	r18, 0x18	; 24
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_SetPinValue+0xa4>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	6a 95       	dec	r22
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_SetPinValue+0xa0>
     f9c:	80 95       	com	r24
     f9e:	82 23       	and	r24, r18
     fa0:	88 bb       	out	0x18, r24	; 24
     fa2:	08 95       	ret
     fa4:	25 b3       	in	r18, 0x15	; 21
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_SetPinValue+0xbc>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	6a 95       	dec	r22
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_SetPinValue+0xb8>
     fb4:	80 95       	com	r24
     fb6:	82 23       	and	r24, r18
     fb8:	85 bb       	out	0x15, r24	; 21
     fba:	08 95       	ret
     fbc:	22 b3       	in	r18, 0x12	; 18
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_SetPinValue+0xd4>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	6a 95       	dec	r22
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_SetPinValue+0xd0>
     fcc:	80 95       	com	r24
     fce:	82 23       	and	r24, r18
     fd0:	82 bb       	out	0x12, r24	; 18
     fd2:	08 95       	ret

00000fd4 <DIO_GetPinValue>:
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	79 f0       	breq	.+30     	; 0xff6 <DIO_GetPinValue+0x22>
     fd8:	28 f0       	brcs	.+10     	; 0xfe4 <DIO_GetPinValue+0x10>
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	a9 f0       	breq	.+42     	; 0x1008 <DIO_GetPinValue+0x34>
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	e1 f0       	breq	.+56     	; 0x101a <DIO_GetPinValue+0x46>
     fe2:	24 c0       	rjmp	.+72     	; 0x102c <DIO_GetPinValue+0x58>
     fe4:	89 b3       	in	r24, 0x19	; 25
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_GetPinValue+0x1a>
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	6a 95       	dec	r22
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_GetPinValue+0x16>
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	08 95       	ret
     ff6:	86 b3       	in	r24, 0x16	; 22
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_GetPinValue+0x2c>
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	6a 95       	dec	r22
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_GetPinValue+0x28>
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	08 95       	ret
    1008:	83 b3       	in	r24, 0x13	; 19
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_GetPinValue+0x3e>
    100e:	95 95       	asr	r25
    1010:	87 95       	ror	r24
    1012:	6a 95       	dec	r22
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_GetPinValue+0x3a>
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	08 95       	ret
    101a:	89 b3       	in	r24, 0x19	; 25
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_GetPinValue+0x50>
    1020:	95 95       	asr	r25
    1022:	87 95       	ror	r24
    1024:	6a 95       	dec	r22
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_GetPinValue+0x4c>
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	08 95       	ret
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret

00001030 <EEPROM_Write>:
    1030:	e1 99       	sbic	0x1c, 1	; 28
    1032:	fe cf       	rjmp	.-4      	; 0x1030 <EEPROM_Write>
    1034:	8e bb       	out	0x1e, r24	; 30
    1036:	6d bb       	out	0x1d, r22	; 29
    1038:	8c b3       	in	r24, 0x1c	; 28
    103a:	84 60       	ori	r24, 0x04	; 4
    103c:	8c bb       	out	0x1c, r24	; 28
    103e:	8c b3       	in	r24, 0x1c	; 28
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	8c bb       	out	0x1c, r24	; 28
    1044:	08 95       	ret

00001046 <EEPROM_Read>:
    1046:	e1 99       	sbic	0x1c, 1	; 28
    1048:	fe cf       	rjmp	.-4      	; 0x1046 <EEPROM_Read>
    104a:	8e bb       	out	0x1e, r24	; 30
    104c:	8c b3       	in	r24, 0x1c	; 28
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	8c bb       	out	0x1c, r24	; 28
    1052:	8d b3       	in	r24, 0x1d	; 29
    1054:	08 95       	ret

00001056 <__vector_1>:
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
    1078:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <EXTI_CallBackPtr>
    107c:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <EXTI_CallBackPtr+0x1>
    1080:	30 97       	sbiw	r30, 0x00	; 0
    1082:	09 f0       	breq	.+2      	; 0x1086 <__vector_1+0x30>
    1084:	09 95       	icall
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_11>:
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <Timer_CallBackPtr>
    10ce:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <Timer_CallBackPtr+0x1>
    10d2:	30 97       	sbiw	r30, 0x00	; 0
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__vector_11+0x30>
    10d6:	09 95       	icall
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <_exit>:
    10fa:	f8 94       	cli

000010fc <__stop_program>:
    10fc:	ff cf       	rjmp	.-2      	; 0x10fc <__stop_program>
